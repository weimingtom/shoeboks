/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.biskwy.items {	import org.shoebox.biskwy.core.Config;	import org.shoebox.biskwy.core.Facade;	import org.shoebox.biskwy.core.IsoGrid;	import org.shoebox.biskwy.core.TwoD;	import org.shoebox.biskwy.events.GridTileEvent;	import org.shoebox.utils.logger.Logger;	import flash.display.BlendMode;	import flash.display.Graphics;	import flash.display.NativeMenuItem;	import flash.display.Sprite;	import flash.events.Event;	import flash.geom.Vector3D;	import flash.ui.ContextMenu;	/**	 * The GridTile class is the representation of the tile in to the map	* It contains a border preview shape, a background clip for hittest purpose and a container	* 	* The drawing method of the tile depend of the namespace in the Config class	*	* @see Config	* org.shoebox.biskwy.items.GridTile	* @author shoebox	*/	public class GridTile extends Sprite{				protected var _nOLDHEIGHT		:int = -1;		protected var _nALPHA			:Number = .1;		protected var _oOPTIONS			:Object;		protected var _spBACK			:Sprite = new Sprite();		protected var _spBEHIND			:Sprite = new Sprite();		protected var _spOVER			:Sprite = new Sprite();		protected var _sBEHAVIOR		:String;		protected var _spCONTAINER		:TileLayersGroup = new TileLayersGroup();		protected var _uLINECOL			:uint = 0x888888;		protected var _vPOSITION		:Vector3D;				// -------o constructor					public function GridTile(nALPHA : Number = .1 , uLINECOL : uint = 0xCCCCCC) : void {								_uLINECOL = uLINECOL;				_nALPHA = nALPHA;								buttonMode = true;				mouseChildren = false;								_spBACK.name = 'back';				_spCONTAINER.name = 'container';				_spOVER.blendMode = BlendMode.ADD;								hitArea = _spBACK;												addChild(_spBACK);				addChild(_spBEHIND);				addChild(_spCONTAINER);				addChild(_spOVER);								var 	ns : Namespace = Config.GRIDTYPE;					ns :: draw();									_menu();			}		// -------o public						/**			* set behavior function			* @public			* @param 			* @return			*/			public function set behavior( s : String ) : void {				trc('set behavior ::: '+s);				_sBEHAVIOR = s;			}						/**			* get behavior function			* @public			* @param 			* @return			*/			public function get behavior() : String {				return _sBEHAVIOR;			}						/**			* set options function			* @public			* @param 			* @return			*/			public function set options( o : Object ) : void {				_oOPTIONS = o;			}						/**			* get options function			* @public			* @param 			* @return			*/			public function get options() : Object {				return _oOPTIONS;			}						/**			* set position function			* @public			* @param 			* @return			*/			public function set position( v : Vector3D) : void {				_vPOSITION = v;			}						/**			* get position function			* @public			* @param 			* @return			*/			public function get position() : Vector3D {				return _vPOSITION;			}						/**			* clear function			* @public			* @param 			* @return			*/			public function clear() : void {				_spCONTAINER.clear();			}						/**			* get back function			* @public			* @param 			* @return			*/			public function get back() : Sprite {				return _spBACK;			}						/**			* over function			* @public			* @param 			* @return			*/			public function over() : void {								var 	ns : Namespace = Config.GRIDTYPE;					ns :: _over();				_spBEHIND.visible = _spOVER.visible = true;			}						/**			* out function			* @public			* @param 			* @return			*/			public function out() : void {				_spBEHIND.visible = _spOVER.visible = false;			}									/**			* get container function			* @public			* @param 			* @return			*/			public function get container() : TileLayersGroup {				return _spCONTAINER;			}						/**			* Remove from the container the sprite with the specified id			* @public				* @param 	id : ID of the sprite to be removed			* @return	void			*/			public function remove( id : uint ) : void {				_spCONTAINER.remove(id);							}						/**			* The sprite with the specified ID is put on step on top of the display list			* @public				* @param 	id : ID of the sprite to be moved			* @return	void			*/			public function swap( id : uint , u :int ) : void {				_spCONTAINER.swap(id , u);			}						/**			* setZForId function			* @public			* @param 			* @return			*/			public function setZForId( uID : uint , z : int) : void {				_spCONTAINER.setZForId(uID , z);			}						/**			* Draw the tile for a 2D grid 			* @public			* @return void			*/			TwoD function draw() : void {								//					//_spBORDER.graphics.lineStyle( .1 , _uLINECOL , _nALPHA , true);					//_spBORDER.graphics.drawRect( 0 , 0 , Config.TILESIZE , Config.TILESIZE );								//For hittest purpose					_spBACK.graphics.beginFill(0x696969 , .1);					_spBACK.graphics.drawRect( 0 , 0 , Config.TILESIZE , Config.TILESIZE );					_spBACK.graphics.endFill();									//					_spOVER.graphics.lineStyle( 1 , 0xFF6600 , 1);					_spOVER.graphics.drawRect( 0 , 0 , Config.TILESIZE -1  , Config.TILESIZE - 1);					_spBEHIND.visible = _spOVER.visible = false;			}						/**			* draw function			* @public			* @param 			* @return			*/			IsoGrid function draw() : void {								//					var w : Number = Config.TILESIZE;					var h : Number = Config.TILESIZE / 2;								//For hittest purpose					_spBACK.graphics.beginFill(0x696969 , .1);					_spBACK.graphics.moveTo( 0 , h / 2);					_spBACK.graphics.lineTo( w/2 , 0 );					_spBACK.graphics.lineTo( w , h/2 );					_spBACK.graphics.lineTo( w/2 , h );					_spBACK.graphics.lineTo( 0 , h/2 );								var 	ns : Namespace = Config.GRIDTYPE;					ns :: _over();			}					// -------o protected						/**			* 			*			* @param 			* @return			*/			IsoGrid function _over() : void {								var nHT: int = _spCONTAINER.height - Config.TILESIZE / 2 ;				if(nHT <= Config.TILESIZE/2)					nHT = 10;								//					if(_nOLDHEIGHT == _spCONTAINER.height)						return;					_nOLDHEIGHT = _spCONTAINER.height;								//					var w : Number = Config.TILESIZE;					var h : Number = Config.TILESIZE / 2;								//					var gOVER : Graphics = _spOVER.graphics;					gOVER.clear();					gOVER.lineStyle( .5 , _uLINECOL , .5 ,  true );					gOVER.moveTo( 0 , h / 2);					gOVER.lineTo( w/2 , 0 );					gOVER.lineTo( w , h/2 );					gOVER.lineTo( w/2 , h );					gOVER.lineTo( 0 , h/2 );					gOVER.moveTo( 0 , h / 2 - nHT);					gOVER.lineTo( w/2 , 0  - nHT);					gOVER.lineTo( w , h/2  - nHT);					gOVER.lineTo( w/2 , h  - nHT);					gOVER.lineTo( 0 , h/2  - nHT);					gOVER.moveTo( 0 , h/2);					gOVER.lineTo( 0 , h/2 - nHT);					gOVER.moveTo( w , h/2);					gOVER.lineTo( w , h/2 - nHT);					gOVER.moveTo( w/2 , h);					gOVER.lineTo( w/2 , h - nHT);															_spBEHIND.visible = _spOVER.visible = false;							}						/**			* 			*			* @param 			* @return			*/			TwoD function _over() : void {				//trc('over');				}						/**			* 			*			* @param 			* @return			*/			protected function _menu() : void {				contextMenu = new ContextMenu();				contextMenu.addItem( new NativeMenuItem('Edit behaviors'));				contextMenu.addEventListener( Event.SELECT , _onSelect , false , 10 , true );			}						/**			* 			*			* @param 			* @return			*/			protected function _onSelect( e : Event ) : void {				trc('onSelect ::: '+e);				e.stopImmediatePropagation();				Facade.getInstance().dispatchEvent( new GridTileEvent( GridTileEvent.GRIDTILE_EDIT , this) );			}					// -------o misc			public static function trc(arguments : *) : void {				Logger.log(GridTile, arguments);			}	}}