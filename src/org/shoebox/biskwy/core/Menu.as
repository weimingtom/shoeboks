/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.biskwy.core {	import org.shoebox.biskwy.core.variables.MapScripts;
	import org.shoebox.patterns.factory.Factory;	import org.shoebox.patterns.singleton.ISingleton;	import org.shoebox.utils.logger.Logger;	import flash.display.NativeMenu;	import flash.display.NativeMenuItem;	import flash.events.Event;	/**	 * org.shoebox.biskwy.core.Menu	* @author shoebox	*/	public class Menu extends NativeMenu implements ISingleton{				public static const MAP_NEW			: String = 'New map';		public static const MAP_OPEN			: String = 'Open map';		public static const MAP_EDIT			: String = 'Edit layers';		public static const MAP_SAVE			: String = 'Save';		public static const MAP_SAVEAS		: String = 'Save as';				public static const PROJECT_NEW		: String = 'New';		public static const PROJECT_OPEN		: String = 'Open';		public static const PROJECT_CLOSE		: String = 'Close';				public static const ABOUT_UPDATE		: String = 'Check for update';		public static const ABOUT_ABOUT		: String = 'About Biskwy';				public static const COMPILE_TEST		: String = 'Test';				public static const NEVERMIND_NEW		: String = 'New script';		public static const NEVERMIND_OPEN		: String = 'Open script';				public static const VIEW_ASSETS		: String = 'Assets manager';		public static const VIEW_GIZMOS		: String = 'Gizmos';		public static const VIEW_GRID			: String = 'Grid';		public static const VIEW_TOOLS		: String = 'Tools';				protected var _oSUBMENUP			: NativeMenuItem = new NativeMenuItem('Project');		protected var _oSUBMENUM			: NativeMenuItem = new NativeMenuItem('Map');		protected var _oSUBMENUC			: NativeMenuItem = new NativeMenuItem('Compile');		protected var _oSUBMENUW			: NativeMenuItem = new NativeMenuItem('View');		protected var _oSUBMENUS			: NativeMenuItem = new NativeMenuItem('Nevermind');		protected var _oSUBMENUA			: NativeMenuItem = new NativeMenuItem('About');				protected var _oMAPS				: NativeMenu;		protected var _oSCRIPTS				: NativeMenu;		protected var _oTOOL				: NativeMenuItem;		protected var _oGRID				: NativeMenuItem;		protected var _oASSETS				: NativeMenuItem;		protected var _oGIZMOS				: NativeMenuItem;				protected static var __instance		:Menu  = null;				// -------o constructor					public function Menu( e : SingletonEnforcer ) : void {				_init();				}		// -------o public						/**			* Return the menu instance			* 			* @public			* @return	singleton instance of the menu class ( Menu )			*/			static public function getInstance() : Menu {								if(__instance == null )					__instance = new Menu( new SingletonEnforcer() );								return __instance;							}						/**			* Activate the menu sub items			* 			* @public			* @return void			*/			public function activate() : void {				_oSUBMENUM.enabled = true;				_oSUBMENUW.enabled = true;				_oSUBMENUC.enabled = true;				_oSUBMENUS.enabled = true;			}			/**			* Setter of the tools state			* 			* @public			* @param	b : tool state ( Boolean ) 			* @return	void			*/			public function set toolState( b : Boolean ) : void {				_oTOOL.checked = b;			}						/**			* Getter of the grid view			* 			* @public			* @return	is view ( Boolean )			*/			public function get showGrid() : Boolean {				return _oGRID.checked;			}						/**			* set showGrid function			* @public			* @param 			* @return			*/			public function set showGrid( b : Boolean ) : void {				_oGRID.checked = b;			}					// -------o protected						/**			* Menu initizialisation			*			* @return void			*/			protected function _init() : void {								//					removeAllItems();								//					_oSUBMENUP.enabled = true;					_oSUBMENUM.enabled = false;					_oSUBMENUC.enabled = false;					_oSUBMENUW.enabled = false;					_oSUBMENUS.enabled = false;								//					_oSUBMENUP.submenu = new NativeMenu();					_oSUBMENUP.submenu.addItem( new NativeMenuItem( PROJECT_NEW ) );					_oSUBMENUP.submenu.addItem( new NativeMenuItem( PROJECT_OPEN ) );							_oSUBMENUP.submenu.addItem( new NativeMenuItem( PROJECT_CLOSE ) );											//					_oSUBMENUM.submenu = new NativeMenu();					_oSUBMENUM.submenu.addItem ( Factory.build( NativeMenuItem , { label : MAP_NEW  , keyEquivalent : 'n'} ));					_oSUBMENUM.submenu.addItem ( Factory.build( NativeMenuItem , { label : MAP_EDIT , keyEquivalent : 'e'} ));					_oSUBMENUM.submenu.addItem ( Factory.build( NativeMenuItem , { label : MAP_OPEN , keyEquivalent : 'o'} ));					_oSUBMENUM.submenu.addItem ( Factory.build( NativeMenuItem , { label : MAP_SAVE , keyEquivalent : 's'} )); 									//					_oSUBMENUC.submenu = new NativeMenu();					_oSUBMENUC.submenu.addItem( new NativeMenuItem(COMPILE_TEST));								//					_oTOOL 	= new NativeMenuItem( VIEW_TOOLS );					_oGRID 	= new NativeMenuItem( VIEW_GRID );					_oASSETS 	= new NativeMenuItem( VIEW_ASSETS );										_oGIZMOS 	= new NativeMenuItem( VIEW_GIZMOS );					_oGIZMOS.checked = _oTOOL.checked = _oGRID.checked = true;										_oSUBMENUW.submenu = new NativeMenu();					_oSUBMENUW.submenu.addItem( _oTOOL );					_oSUBMENUW.submenu.addItem( new NativeMenuItem('',true) );					_oSUBMENUW.submenu.addItem( _oGRID );					_oSUBMENUW.submenu.addItem( new NativeMenuItem('',true) );					_oSUBMENUW.submenu.addItem( _oGIZMOS );					_oSUBMENUW.submenu.addItem( new NativeMenuItem('',true) );					_oSUBMENUW.submenu.addItem( _oASSETS );									//					_oSUBMENUA.submenu = new NativeMenu();					_oSUBMENUA.submenu.addItem( new NativeMenuItem( ABOUT_UPDATE ));					_oSUBMENUA.submenu.addItem( new NativeMenuItem( ABOUT_ABOUT ));								//					_oSUBMENUS.submenu = new NativeMenu();					_oSUBMENUS.submenu.addItem( new NativeMenuItem( NEVERMIND_NEW ) );										_oSCRIPTS = new NativeMenu();					_oSCRIPTS.addEventListener( Event.DISPLAYING , _onDisplayScripts );					_oSUBMENUS.submenu.addSubmenu(_oSCRIPTS, NEVERMIND_OPEN );														//					addItem(_oSUBMENUP);					addItem(_oSUBMENUM);					addItem(_oSUBMENUS);					addItem(_oSUBMENUW);					addItem(_oSUBMENUC);					addItem(_oSUBMENUA);								//					addEventListener(Event.SELECT , _onMenuSelection , false , 10 , true);			}						/**			* When an item is selected in to the menu			*			* @param 	e : select event (Event)			* @return	void			*/			protected function _onMenuSelection ( e : Event ) : void {								if(!(e.target is NativeMenuItem))					return;								Facade.getInstance().dispatchEvent( new Event( (e.target as NativeMenuItem ).label ));				dispatchEvent(e);			}						/**			* 			*			* @param 			* @return			*/			final protected function _onSelect( e : Event ) : void {				trc('onSelect ::: '+e.target+' /// '+e.target.name);			}						/**			* 			*			* @param 			* @return			*/			final protected function _onDisplayScripts( e : Event ) : void {				trc('_onDisplayScripts ::: '+e);								_oSCRIPTS.removeAllItems();								var l : int = 0;				if( MapScripts )					l = MapScripts.length;									if( l == 0 ){					var 	oITEM : NativeMenuItem = new NativeMenuItem('none');						oITEM.enabled = false;					_oSCRIPTS.addItem( oITEM );				}							}					// -------o misc			public static function trc(arguments : *) : void {				Logger.log(Menu, arguments);			}	}}internal class SingletonEnforcer{	}