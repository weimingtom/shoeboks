/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.biskwy.views {	import fl.controls.Button;	import org.shoebox.biskwy.core.Config;	import org.shoebox.biskwy.core.TwoD;	import org.shoebox.biskwy.items.GridTile;	import org.shoebox.biskwy.items.PropsPanel;	import org.shoebox.biskwy.items.TileLayersGroup;	import org.shoebox.biskwy.models.MNewGroup;	import org.shoebox.display.DisplayFuncs;	import org.shoebox.patterns.commands.samples.StageResize;	import org.shoebox.patterns.factory.Factory;	import org.shoebox.patterns.mvc.abstracts.AView;	import org.shoebox.patterns.mvc.events.UpdateEvent;	import org.shoebox.patterns.mvc.interfaces.IView;	import org.shoebox.utils.logger.Logger;	import flash.display.BitmapData;	import flash.display.Shape;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Rectangle;	import flash.geom.Vector3D;	/**	 * View of the newgroup content window	*  	* org.shoebox.biskwy.views.VNewGroup	* @author shoebox	*/	public class VNewGroup extends AView implements IView {				protected var _oBUTTON		:Button;		protected var _oBUTTONCCL	:Button;		protected var _spDRAW		:Sprite = new Sprite();		protected var _spBORDER		:Sprite = new Sprite();		protected var _shBACK		:Shape = new Shape();		protected var _oPANEL		:PropsPanel;		protected var _vCONTENT		:Vector.<GridTile>;				// -------o constructor					/**			* Constructor of the VNewGroup class			*			* @public			* @return	void			*/			public function VNewGroup() : void {							}		// -------o public						/**			* Initialization 			* @public			* @return void			*/			final override public function initialize() : void {					}						/**			* When the view receive an update			* 			* @public			* @param	o : update event (UpdateEvent) 			* @return	void			*/			override final public function update(o:UpdateEvent = null) : void {				if(o.type == MNewGroup.INIT){					//						controller.register(_spDRAW , MouseEvent.MOUSE_OVER , true ,10 , false);						controller.register(_spDRAW , MouseEvent.MOUSE_OUT , true ,10 , false);						controller.register(_spDRAW , MouseEvent.CLICK , true ,10 , false);											//						if(!_oPANEL)							_panel();				}								if(o.type == MNewGroup.EDIT){					if(!_oPANEL)						_panel();				}			}												/**			* When the MVC triad is canceled			* 			* @public			* @param	e : Cancel event (Event) 			* @return	void			*/			override final public function cancel(e:Event = null) : void {				trc('cancel');				//					controller.unRegister(_spDRAW , MouseEvent.MOUSE_OVER , true);					controller.unRegister(_spDRAW , MouseEvent.MOUSE_OUT , true);					controller.unRegister(_spDRAW , MouseEvent.CLICK , true);					controller.unRegister( _oPANEL , Event.CHANGE , true );					controller.unRegister(_oBUTTON , MouseEvent.CLICK , false);								controller.unRegister(_oBUTTONCCL , MouseEvent.CLICK , false);						}							/**			* Redrawning the view (after a modification of one of the props by example)			* 			* @public			* @return void			*/			public function redraw() : void {				_draw();			}						/**			* Getter of the props object from the props panel			* @public			* @return	o : props (Object)			*/			public function get props() : Object {				return _oPANEL.getDatas();			}						/**			* get tiles function			* @public			* @param 			* @return			*/			public function get tiles() : Vector.<GridTile> {				return _vCONTENT;			}						/**			* get preview function			* @public			* @param 			* @return			*/			public function get preview() : BitmapData {								var 	oB : BitmapData = new BitmapData ( _spDRAW.width , _spDRAW.height , true , 0 );					oB.draw( _spDRAW , null , null , null , null , true);									return oB;							}						/**			* addTileAt function			* @public			* @param 			* @return			*/			public function addTileAt( iX : uint , iY : uint , iID : uint ) : void {				trc('addTileAt ::: '+iX+' - '+iY+' /// '+iID);								var oFUNC:Function = function( t : GridTile , u : uint , v : Vector.<GridTile> ):Boolean{										if( t.position.x == iX && t.position.y == iY ){						(t.container as TileLayersGroup).fill( {id : iID} , 0 , true );						return false;					}										return true;									};				_vCONTENT.forEach(oFUNC);			}						/**			* updataPanel function			* @public			* @param 			* @return			*/			public function updatePanel() : void {				if(_oPANEL)					_oPANEL.dataProvider = (model as MNewGroup).props;			}		// -------o protected						/**			* Props panel initialization			*			* @return voids			*/			protected function _panel() : void {								//					_shBACK.graphics.beginFill( 0x2A2A2A );					_shBACK.graphics.drawRect( 0 , 0 , 550 , 500 );					_shBACK.graphics.endFill();										addChild(_shBACK);													//					var iY : uint = StageResize.rect.height * .75 - Config.HEADDECAL - 110;					_oPANEL = new PropsPanel();					_oPANEL.x = 550;					_oPANEL.setSize(250, iY);					controller.register( _oPANEL , Event.CHANGE , true , 10 , true );					updatePanel();					addChild(_oPANEL);								//					addChild( _spDRAW );					_draw();						addChild(_spBORDER);									//					_oBUTTON = Factory.build(Button , {x : 555 , y  :iY + 10 , label : 'VALIDATE' , width : 240 , name:'validate'});		      		addChild( _oBUTTON );		      		controller.register(_oBUTTON , MouseEvent.CLICK , false ,10 , true);		      				      	//		      		_oBUTTONCCL = Factory.build(Button , {x : 555 , y  : iY + 40 , label : 'CANCEL' , width : 240 , name:'cancel'});		      		controller.register(_oBUTTONCCL , MouseEvent.CLICK , false ,10 , true);		      		addChild(_oBUTTONCCL);			}						/**			* Drawning the grid and set the content if we are in edition mode 			*			* @return void			*/			protected function _draw() : void {				var o : Object = _oPANEL.getDatas();								//					var x : int;					var y : int;					var oT : GridTile;					var wBASE : uint = o.bWidth;					var hBASE : uint = o.bHeight;					var hCLIP : uint = o.cHeight;					var sNAME : String;					var vTILE : Vector.<GridTile> = new Vector.<GridTile>();										//Base						//							for( y = 0 ; y < hBASE ; y ++ ){								for( x = 0 ; x < wBASE ; x++){																		sNAME = 'base'+x+'-'+y;									oT = _spDRAW.getChildByName(sNAME) as GridTile; 									if(oT==null){										oT = new GridTile( .5 );										oT.name = sNAME;									}									oT.position = new Vector3D( x , y + hCLIP , 0);									vTILE.push( oT );																			if(Config.GRIDTYPE == TwoD){										oT.x = x * Config.TILESIZE; 											oT.y = (y + hCLIP) * Config.TILESIZE; 											oT.name = sNAME;									}else{										//TODO : Mode iso									}									_spDRAW.addChild( oT );																	}							}										// Height outside base												for( y = 0 ; y < hCLIP ; y ++ ){														for( x = 0 ; x < wBASE ; x++){																sNAME = 'h'+x+'-'+y;								oT = _spDRAW.getChildByName(sNAME) as GridTile;								if(oT==null){									oT = new GridTile( .1 , 0xEEEEEE );									oT.name = sNAME;								}								oT.position = new Vector3D( x , (hCLIP - 1 - y) , 0);								vTILE.push( oT );																if(Config.GRIDTYPE == TwoD){									oT.x = x * Config.TILESIZE; 										oT.y = (hCLIP - 1 - y) * Config.TILESIZE; 									}else{									//TODO : Mode iso								}								_spDRAW.addChild( oT );							}														}											//						DisplayFuncs.align( _spDRAW , new Rectangle( 0 , 0 , 550 , 500 ));						_spBORDER.x = _spDRAW.x;						_spBORDER.y = _spDRAW.y + Config.TILESIZE * hCLIP;											//						var vT : Vector.<GridTile> = new Vector.<GridTile>();						var i : uint = 0;						var l : uint = _spDRAW.numChildren;						for( i ; i < l ; i++ )							vT.push( _spDRAW.getChildAt(i) as GridTile );													i = 0;						for( i ; i < l ; i++ ){							oT = vT[i];							if(vTILE.indexOf(oT)==-1)								_spDRAW.removeChild(oT);						}												_vCONTENT = vTILE;			}					// -------o misc			public static function trc(...args : *) : void {				Logger.log(VNewGroup, args);			}	}}