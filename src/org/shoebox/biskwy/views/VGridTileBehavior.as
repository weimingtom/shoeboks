/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.biskwy.views {	import fl.controls.Button;	import fl.controls.ComboBox;	import fl.controls.Label;	import fl.controls.TextInput;	import fl.data.DataProvider;	import org.shoebox.biskwy.items.GridTile;	import org.shoebox.biskwy.models.MGridTileBehavior;	import org.shoebox.patterns.factory.Factory;	import org.shoebox.patterns.mvc.abstracts.AView;	import org.shoebox.patterns.mvc.events.UpdateEvent;	import org.shoebox.patterns.mvc.interfaces.IView;	import org.shoebox.utils.logger.Logger;	import flash.events.Event;	import flash.events.MouseEvent;	/**	 * org.shoebox.biskwy.views.VGridTileBehavior	* @author shoebox	*/	public class VGridTileBehavior extends AView implements IView {				protected var _oBUTTONC		: Button;		protected var _oBUTTONV		: Button;		protected var _cbTYPES		: ComboBox;		protected var _oDPTYPES		: DataProvider;		protected var _oSUBOPTIONS	: SubOptions;				// -------o constructor					public function VGridTileBehavior() : void {				_oDPTYPES = new DataProvider();				_oDPTYPES.addItem( {label : 'none' , value : null , subview : null} );				_oDPTYPES.addItem( {label : 'WARP TO' , value : 'BehaviorEntry' , subview : GOTOSubView} );				_oDPTYPES.addItem( {label : 'MAP ENTRY' , value : 'BehaviorWarp' , subview : EntryZone } );			}		// -------o public						/**			* initialize function			* @public			* @param 			* @return			*/			final override public function initialize( ) : void {				//trc('initialize');				}						/**			* update function			* @public			* @param 			* @return			*/			override final public function update(o:UpdateEvent = null) : void {				trc('update');				_draw();			}												/**			* cancel function			* @public			* @param 			* @return			*/			override final public function cancel(e:Event = null) : void {												}						/**			* get behavior function			* @public			* @param 			* @return			*/			public function get behavior() : String {				return _cbTYPES.selectedItem.value;			}						/**			* Get of the optional arguments of the behavior			* @public			* @return options (Object)			*/			public function get behaviorOptions() : Object {				return _oSUBOPTIONS.options;			}					// -------o protected						/**			* 			*			* @param 			* @return			*/			protected function _draw() : void {				trc('draw ::: '+_oDPTYPES);								addChild( Factory.build( Label , { 										text : 'POSITION' , 										x : 15 , 										y : 20 										} ) );								addChild( Factory.build( TextInput , { 											text : (model as MGridTileBehavior).tileRef.position.x +'', 											width : 170 , 											x : 15 , 											y : 40 , 											editable : false										}) );								addChild( Factory.build( TextInput , { 											text : (model as MGridTileBehavior).tileRef.position.y +'', 											width : 170 , 											x : 215 , 											y : 40 ,											editable : false										}) );								addChild( Factory.build( Label , { 										text : 'BEHAVIOR' , 										x : 15 , 										y : 80 										} ) );								_cbTYPES = Factory.build( ComboBox , { 											width : 150  , 											x : 15 , 											y : 100 										});								var oREF : GridTile = (model as MGridTileBehavior).tileRef;				var u : uint = 0;				trc('behavior ::: '+oREF.behavior);				if(oREF.behavior == null )					u = 0;				else{					var i : uint = 0;					var l : uint = _oDPTYPES.length;					while( i < l ){						if(_oDPTYPES.getItemAt(i).value == oREF.behavior){							u = i;							break;						}						i++;					}				}													_cbTYPES.addEventListener( Event.CHANGE , _onChange , false , 10 , true );														_cbTYPES.dataProvider = _oDPTYPES;				_cbTYPES.selectedIndex = u;				addChild(_cbTYPES);									graphics.lineStyle( .1 , 0x2A2A2A , 1);				graphics.moveTo( 15 , 140 );				graphics.lineTo( 385 , 140 );								_onChange();								_oBUTTONV = Factory.build(Button, { x : 15, y : 230, label:'Validate' , width : 170 , name:'Validate'});				_oBUTTONC = Factory.build(Button, { x : 215, y : 230, label:'Cancel' , width : 170 , name : 'Cancel'});				addChild(_oBUTTONV);						addChild(_oBUTTONC);								controller.register( this , MouseEvent.CLICK , true , 10 , true );			}						/**			* 			*			* @param 			* @return			*/			protected function _onChange( e : Event = null ) : void {								//					if( _cbTYPES.selectedItem == null )						return;								//					if(_oSUBOPTIONS)						if(contains(_oSUBOPTIONS))							removeChild(_oSUBOPTIONS);								//					if(_cbTYPES.selectedItem.subview==null)						return;										//							trc('options ::: '+(model as MGridTileBehavior).tileRef.options);						_oSUBOPTIONS =  Factory.build( _cbTYPES.selectedItem.subview , { 																options : (model as MGridTileBehavior).tileRef.options, 																dataProvider : (model as MGridTileBehavior).DPMaps															} );					_oSUBOPTIONS.init();					_oSUBOPTIONS.y = 150;					_oSUBOPTIONS.x = 15;					addChild(_oSUBOPTIONS);			}		// -------o misc			public static function trc(...args : *) : void {				Logger.log(VGridTileBehavior, args);			}	}}import fl.controls.ComboBox;import fl.controls.Label;import fl.data.DataProvider;import org.shoebox.patterns.factory.Factory;import org.shoebox.utils.logger.Logger;import flash.display.Sprite;/** * org.shoebox.biskwy.views.VGridTileBehavior * @author shoebox */ class SubOptions extends Sprite {	protected var _oDP		:DataProvider;	protected var _oOPTIONS		:Object;		// -------o constructor		public function SubOptions() : void {		}	// -------o public				/**		* init function		* @public		* @param 		* @return		*/		public function init() : void {				}				/**		* set DataProvider function		* @public		* @param 		* @return		*/		public function set dataProvider( o : DataProvider ) : void {			_oDP = o;		}				/**		* get dataProvider function		* @public		* @param 		* @return		*/		public function get dataProvider() : DataProvider {			return _oDP;		}				/**		* get options function		* @public		* @param 		* @return		*/		public function get options() : Object {			return _oOPTIONS;		}				/**		* set options function		* @public		* @param 		* @return		*/		public function set options( o : Object ) : void {			_oOPTIONS = o;		}			// -------o protected	// -------o misc		public static function trc(...args : *) : void {			Logger.log(SubOptions, args);	}}/** * org.shoebox.biskwy.views.VGridTileBehavior * @author shoebox */class GOTOSubView extends SubOptions {	protected var _oCOMBO		:ComboBox = new ComboBox();		// -------o constructor		public function GOTOSubView() : void {			addChild(Factory.build(Label, { text : 'MOVE TO MAP' , y : 10}));						_oCOMBO = Factory.build( ComboBox , { y : 30 , width : 150 } );			_oCOMBO.selectedIndex = 0;			addChild( _oCOMBO);		}	// -------o public				/**		* set DataProvider function		* @public		* @param 		* @return		*/		override public function set dataProvider( o : DataProvider ) : void {			super.dataProvider = o;		}				/**		* get options function		* @public		* @param 		* @return		*/		final override public function get options() : Object {			return { gotoMapID : _oCOMBO.selectedItem.value };		}				/**		* init function		* @public		* @param 		* @return		*/		final override public function init() : void {						_oCOMBO.dataProvider = dataProvider;							var u : uint = 0;			var l : uint = _oDP.length;						//TODO : Options selection					if(_oOPTIONS){					if(_oOPTIONS.gotoMapID !== null){												for( u ; u < l ; u++){							trace(_oDP.getItemAt(u)+' /// '+_oOPTIONS.gotoMapID);							if(_oDP.getItemAt(u).value == _oOPTIONS.gotoMapID ){								_oCOMBO.selectedIndex = u;								break;							}						}													}				}		}			// -------o protected			// -------o misc		public static function trc(...args : *) : void {			Logger.log(GOTOSubView, args);	}}/** * org.shoebox.biskwy.views.VGridTileBehavior * @author shoebox */class EntryZone extends SubOptions{		// -------o constructor		public function EntryZone() : void {			addChild(Factory.build(Label, { text : 'NO OPTIONS...' , y : 10}));		}	// -------o public							// -------o protected	// -------o misc			public static function trc(...args : *) : void {			Logger.log(EntryZone, args);	}}