/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.biskwy.views.tools {	import fl.containers.ScrollPane;	import fl.controls.Button;	import fl.controls.ScrollPolicy;	import org.shoebox.biskwy.data.LayerItem;	import org.shoebox.biskwy.items.PropsPanel;	import org.shoebox.biskwy.items.tools.MapLayerItem;	import org.shoebox.biskwy.models.tools.MEditMap;	import org.shoebox.biskwy.windows.tools.ParallaxTestWindow;	import org.shoebox.display.DisplayFuncs;	import org.shoebox.display.containers.Parallax;	import org.shoebox.patterns.factory.Factory;	import org.shoebox.patterns.mvc.abstracts.AView;	import org.shoebox.patterns.mvc.events.UpdateEvent;	import org.shoebox.patterns.mvc.interfaces.IView;	import org.shoebox.utils.logger.Logger;	import flash.display.Graphics;	import flash.display.Loader;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.ColorTransform;	import flash.geom.Point;	import flash.geom.Rectangle;	/**	 * org.shoebox.biskwy.views.tools.VEditMap	* @author shoebox	*/	public class VEditMap extends AView implements IView {				public var btnMoveUp			:Button;		public var btnMoveDown			:Button;		public var btnDelete			:Button;		public var btnNewLayer			:Button;		public var btnTest			:Button;		public var oPropPanel			:PropsPanel;				protected var _oTRANS			:ColorTransform = new ColorTransform();		protected var _oCURRENT		:MapLayerItem;		protected var _oPARALLAX		:Parallax;		protected var _oSCROLLBAR		:ScrollPane;		protected var _oSCROLLPREVIEW	:ScrollPane;		protected var _spCONTAINER		:Sprite = new Sprite();		protected var _spTOOLS			:Sprite = new Sprite();		protected var _spPREVIEW		:Sprite = new Sprite();		protected var _spDEMO			:Sprite = new Sprite();		//protected var _oTIMER			:PerfectTimer;				// -------o constructor					/**			* Constructor of the VEditMap class			*			* @public			* @return	void			*/			public function VEditMap() : void {				_oTRANS.redOffset = 255;			}		// -------o public						/**			* View initialization			*			* @public			* @return	void			*/			override final public function initialize() : void {				trc('initialize');								//					graphics.beginFill( 0x2A2A2A );					graphics.drawRect( 0 , 0 , 800 , 535 );										graphics.beginFill( 0xCCCCCC );					graphics.drawRect( 810 , 530 , 180 , 160 );										graphics.endFill();					addChild( _spPREVIEW );								//					oPropPanel = Factory.build( PropsPanel , { x : 800 , y : 0 } ) as PropsPanel ;					oPropPanel.setSize( 200 , 520 );					addChild( oPropPanel );					controller.register( oPropPanel , Event.CHANGE , true , 10 , true );									// 					_spCONTAINER.y = 555;					addChild( _spCONTAINER );							_tools();									//					_oSCROLLBAR = new ScrollPane();					_oSCROLLBAR.source = _spCONTAINER;					_oSCROLLBAR.setSize( 800 , 145 );					_oSCROLLBAR.y = 555;					_oSCROLLBAR.horizontalScrollPolicy = ScrollPolicy.OFF;					_oSCROLLBAR.verticalScrollPolicy = ScrollPolicy.AUTO;					addChild(_oSCROLLBAR);									//					_oSCROLLPREVIEW = Factory.build( ScrollPane , 	{														source : _spPREVIEW,														horizontalScrollPolicy : ScrollPolicy.AUTO,														verticalScrollPolicy : ScrollPolicy.AUTO													} );					_oSCROLLPREVIEW.setSize( 800 , 530 );					addChild( _oSCROLLPREVIEW );					addChild( _spDEMO );			}						/**			* When the view receive an update			* 			* @public			* @param	o : optional update event (UpdateEvent) 			* @return	void			*/			override final public function update(o:UpdateEvent = null) : void {								switch( o.type ){										case Event.CHANGE:						_redraw();						break;											case Event.SELECT:						oPropPanel.dataProvider = (model as MEditMap ).layerDesc;						break;					}							}												/**			* When the view is canceled			* 			* @public			* @param	e : optional cancel event (Event) 			* @return	void			*/			override final public function cancel(e:Event = null) : void {				controller.unRegister( _spCONTAINER , MouseEvent.MOUSE_OVER , true );				controller.unRegister( _spCONTAINER , MouseEvent.MOUSE_OUT	, true );								}						/**			* setSelected function			* @public			* @param 			* @return			*/			final public function setSelected( o : MapLayerItem ) : void {								if( _oCURRENT ){					_oCURRENT.mouseEnabled = true;					_oCURRENT.out();				}								_oCURRENT = o;				_oCURRENT.mouseEnabled = false;				_oCURRENT.over();			}						/**			* test function			* @public			* @param 			* @return			*/			final public function test() : void {				_test();			}					// -------o protected						/**			* Redrawning the layers list			*			* @return	void			*/			final protected function _redraw() : void {								var i : int = 0;				var l : int = (model as MEditMap).layerLength;				var o : MapLayerItem;				var r : Loader;				var b : Boolean;				var p : Point;				var s : String;				var v : Vector.<String> = Vector.<String>([]);				var z : int = 0;				for( i ; i < l ; i++ ){										b = (model as MEditMap).isGameLayer(i);					s = (model as MEditMap).getLayerNameByID(i);					v.push( s ) ;					o = _spCONTAINER.getChildByName(s) as MapLayerItem;										if( o == null ){						o = Factory.build( MapLayerItem , {  													x : 0 , y : i * 26 + 2 , 													sNAME : s,													ref : (model as MEditMap).getLayerRef(i),													bGAME_LAYER : b,													name : (model as MEditMap).getLayerNameByID(i)												} ); 					}else						o.y = i * 26 + 2 ;						o.redraw();										_spCONTAINER.addChild( o );											if( !b ){												p = (model as MEditMap).getLayerDecal( i );						r = _spPREVIEW.getChildByName(s) as Loader;												if( !r ){							r = new Loader();							r.name = s;							r.loadBytes((model as MEditMap).getLayerBitmap( i ));							if( r!== null )								_spPREVIEW.addChild( r );						}												if( o == _oCURRENT )							r.transform.colorTransform = _oTRANS;						else							r.transform.colorTransform = new ColorTransform();												_spPREVIEW.setChildIndex(r , z);						r.x = p.x;						r.y = p.y;						z++;					}				}												var vTMP : Vector.<String>;								//					vTMP = DisplayFuncs.getChildsName(_spCONTAINER);									for each( s in vTMP )						if( v.indexOf( s ) == -1 )							_spCONTAINER.removeChild(_spCONTAINER.getChildByName(s));								//					vTMP = DisplayFuncs.getChildsName(_spPREVIEW );					for each( s in vTMP )						if( v.indexOf( s ) == -1 )							_spPREVIEW.removeChild(_spPREVIEW.getChildByName(s));								controller.register( _spCONTAINER , MouseEvent.MOUSE_OVER 	, true , 10 , true );				controller.register( _spCONTAINER , MouseEvent.MOUSE_OUT	, true , 10 , true );				controller.register( _spCONTAINER , MouseEvent.CLICK		, true , 10 , true );				_oSCROLLBAR.update();				_oSCROLLPREVIEW.update();							}						/**			* Tool bar initizialisation			*			* @return	void			*/			final protected function _tools() : void {								//Graphics					var 	g : Graphics = _spTOOLS.graphics;						g.beginFill( 0x696969 , 1 );						g.drawRect( 0 , 0 , 800 , 25 );						g.lineStyle( .1 , 0xFFFFFF );						g.moveTo( 0 , 0 );						g.lineTo( 800 , 0 );					_spTOOLS.y = 530;					addChild( _spTOOLS );									//Buttons					btnNewLayer = Factory.build( Button , { y : 4 , x : 5 , label:'Add new layer' , name:'NewLayer' , height : 18 } );					_spTOOLS.addChild( btnNewLayer );										btnMoveUp 	= Factory.build(Button , {x : 565 , y : 4 , label:'Up' , name:'up'});					btnMoveUp.setSize(60,18);						btnMoveDown= Factory.build(Button , {x : 630 , y : 4 , label:'Down' , name:'down'});					btnMoveDown.setSize(60,18);										btnDelete = Factory.build(Button , {x : 695 , y : 4 , label:'Delete' , name : 'del'});					btnDelete.setSize(60,18);									btnTest = Factory.build( Button , 	{												x : 820 , y : 550 , 												label : 'Test'											});					btnTest.setSize( 160 , 40 );										_spTOOLS.addChild( btnDelete );					_spTOOLS.addChild( btnMoveUp );					_spTOOLS.addChild( btnMoveDown );					addChild( btnTest );									//					controller.register( btnNewLayer , MouseEvent.CLICK , false , 10 , true );					controller.register( btnDelete , MouseEvent.CLICK , false , 10 , true );					controller.register( btnMoveUp , MouseEvent.CLICK , false , 10 , true );					controller.register( btnMoveDown , MouseEvent.CLICK , false , 10 , true );					controller.register( btnTest , MouseEvent.CLICK , false , 10 , true );			}						/**			* 			*			* @param 			* @return			*/			final protected function _test() : void {				trc('test');								//					ParallaxTestWindow.getInstance().activate();								//					_oPARALLAX = new Parallax( );					_oPARALLAX.scrollRect = _oPARALLAX.rBOUNDS = new Rectangle( 0 , 0 , 800 , 600 );					_oPARALLAX.cacheAsBitmap = true;										ParallaxTestWindow.getInstance().stage.frameRate = 30;					ParallaxTestWindow.getInstance().addEventListener( Event.CLOSE , _onTestWindowClosed , false , 10 , true );					ParallaxTestWindow.getInstance().stage.addChild( _oPARALLAX );														//					var i : int = 0;					var l : int = (model as MEditMap).layerLength;					var r : Loader;					var oREF:LayerItem;										for( i ; i < l ; i++ ){												if( (model as MEditMap).isGameLayer(i) )							continue;												oREF = (model as MEditMap).getLayerRef(i);								_oPARALLAX.addLayer(oREF.loaderRef.content , oREF.decalX , oREF.decalY, false , oREF.iSpeed );					}					_oPARALLAX.init();					_oPARALLAX.move( 0 );					/*					KeyTool.getInstance().ref = ParallaxTestWindow.getInstance().stage;										if( !KeyTool.getInstance().isRunning) 						KeyTool.getInstance().execute();										_oTIMER = new PerfectTimer( 1000 / 30 , _onFrame );					_oTIMER.start();					 * 					 */			}						/**			* 			*			* @param 			* @return			*/			final protected function _onTestWindowClosed( e : Event ) : void {				//_oTIMER.stop();			}						/**			* 			*			* @param 			* @return			*/			final protected function _onFrame() : void {								var iX : int = 0;				var iY : int = 0;				/*				if( KeyTool.isDown( Keyboard.LEFT ))					iX += 2;								if( KeyTool.isDown( Keyboard.RIGHT ))					iX -= 2;									if( KeyTool.isDown( Keyboard.UP ))					iY += 2;									if( KeyTool.isDown( Keyboard.DOWN ))					iY -= 2;				_oPARALLAX.move( iX , iY );				*/				}					// -------o misc			public static function trc(...args : *) : void {				Logger.log(VEditMap, args);			}	}}