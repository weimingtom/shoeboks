/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.biskwy.views {	import org.shoebox.biskwy.core.variables.GizmoContainer;	import org.shoebox.biskwy.data.LinkItem;	import org.shoebox.biskwy.items.PropsPanel;	import org.shoebox.biskwy.items.scriptsEditor.AAction;	import org.shoebox.biskwy.items.scriptsEditor.Action;	import org.shoebox.biskwy.items.scriptsEditor.Actor;	import org.shoebox.biskwy.items.scriptsEditor.Anchor;	import org.shoebox.biskwy.items.scriptsEditor.NevVariable;	import org.shoebox.biskwy.models.MNevermind;	import org.shoebox.patterns.factory.Factory;	import org.shoebox.patterns.mvc.abstracts.AView;	import org.shoebox.patterns.mvc.events.UpdateEvent;	import org.shoebox.patterns.mvc.interfaces.IView;	import org.shoebox.utils.DescribeTypeCache;	import org.shoebox.utils.logger.Logger;	import flash.display.DisplayObject;	import flash.display.NativeMenu;	import flash.display.NativeMenuItem;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Point;	/**	 * org.shoebox.biskwy.views.VNevermind	* @author shoebox	*/	public class VNevermind extends AView implements IView {				public static const REDRAW		:String = 'REDRAW';				protected var _spCONTAINER		:Sprite = new Sprite();		protected var _spLINKS			:Sprite = new Sprite();		protected var _spPREVIEW		:Sprite = new Sprite();		protected var _oPROPS			:PropsPanel;		protected var _oACTORS			:NativeMenu ;		protected var _oXML			:XML;				// -------o constructor					/**			* Constructor of the VNevermind class			*			* @public			* @return	void			*/			public function VNevermind() : void {												graphics.beginFill( 0xEAEAEA );				graphics.drawRect( 0 , 0 , 900 , 700 );								_oXML = <root>			      					<entry label = "NONE" type = "title" prop='infottl'/>			      					<!--			      					<entry label = 'Active' 		prop='active' 	type = "boolean" value = "false" />			      					<entry label = 'Ground tile' 		prop='ground' 	type = "boolean" value = "false" />			      					<entry label = 'Element ID' 		prop='tileID' 	type = "string" value = "false" />			      					<entry label = 'Element Name' 	prop='name' 	type = "string" value = "false" />			      					<entry label = 'Categorie'	 	prop='cat'	 	type = "string" value = "false" />			      					-->			      		</root>;								}		// -------o public						/**			* View initialization			* 			* @public			* @return	void			*/			override final public function initialize() : void {								_oPROPS = Factory.build( PropsPanel , { x : 900 } ) as PropsPanel ;				_oPROPS.setSize( 300 , 700 );				_oPROPS.dataProvider = _oXML;								addChild( _oPROPS );							}						/**			* When the view receive an update			* 			* @public			* @param	o : optional update event ( UpdateEvent ) 			* @return	void			*/			override final public function update( o : UpdateEvent = null ) : void {								switch( o.type ){										case REDRAW:						_redrawLinks();						break;											default:						_run();						break;									}						}												/**			* When the view is canceled			* 			* @public			* @param	e : optional cancel event ( Event ) 			* @return	void			*/			override final public function cancel( e : Event = null ) : void {												}						/**			* Create a new code name			* 			* @public			* @param 	s : object name 		( String )			* @param 	c : Class object		( Class )			* @return	void			*/			final public function create( s : String , c : Class ) : void {								trc( 'create ::: ' + c );				trc( 'classtype ::: ' + (model as MNevermind).getClassCodeType(c) );								var i : int , l : int , o : AAction , x : XML;								switch( (model as MNevermind).getClassCodeType(c) ){										case 'Action':						o  = new Action( s , c );						break;											case 'Actor':						o = new Actor( s , c );						break;											case 'Variable':						o = new NevVariable( s , c );						break;									}									if(!o)						return;											o.x = stage.mouseX;					o.y = stage.mouseY;									// Variables					x = DescribeTypeCache.getDesc( c );					l = x..variable.length();										for( i = 0 ; i < l ; i++ ){												if( x..variable[i]..metadata.(@name=='NVM_Variable').length() == 0 )							continue;												o.addVariable( x..variable[i] );					}									// Input channels					l = x..method.length();					for( i = 0 ; i < l ; i++ ){												if( x..method[i]..metadata.(@name=='NVM_Input').length() == 0 )							continue;												o.addAnchor( x..method[i].@name , true , x..method[i] );					}									// Outputs channels					l = x..metadata.length();					for( i = 0 ; i < l ; i++ ){												if( x..metadata[i]..arg.(@key=='NVM_Output').length() == 0 )								continue;													o.addAnchor( x..metadata[i]..arg.( @key=='name' )[0].@value , false , x..metadata[i] );					}								//									_spCONTAINER.addChild(o);			}						/**			* Drawning a link between two <code>Anchor</code>			* 			* @public			* @param	from	: from anchor (Anchor)			* @param	to 	: to anchor (Anchor)			* @return	void			*/			final public function drawAnchorLink( from : Anchor , to : Anchor ) : void {								var 	oP1 : Point = from.square.getRect(this).topLeft;					oP1.y += 4;									var 	oP4 : Point = to.square.getRect(this).topLeft;					oP4.y += 4;									var	nDI : Number = Point.distance( oP1 , oP4 );					nDI/= 2;									var	oP2 : Point = oP1.clone();					oP2.x += (from.right) ? -nDI : nDI;									var	oP3 : Point = oP4.clone();					oP3.x += (to.right) ? -nDI : nDI;								_spLINKS.graphics.lineStyle( 1 , 0x0AB6F3 , 1 , true );				_spLINKS.graphics.moveTo( oP1.x, oP1.y);								//									var vBEZIERS : Vector.<Point> = bezierValues(oP1, oP2, oP3, oP4, 50);					var oPT : Point;					for each( oPT in vBEZIERS) {						_spLINKS.graphics.lineTo( oPT.x, oPT.y );					}									//										var i : int = to.right ? 5 : -5;					_spLINKS.graphics.beginFill( 0x0AB6F3 );					_spLINKS.graphics.moveTo( oP4.x - i , oP4.y  - i );					_spLINKS.graphics.lineTo( oP4.x , oP4.y );					_spLINKS.graphics.lineTo( oP4.x - i , oP4.y  + i );					_spLINKS.graphics.lineTo( oP4.x - i , oP4.y  - i );					_spLINKS.graphics.endFill();			}									/**			* Preview a link between anchor			* 			* @public			* @param	from : from anchor ( Anchor ) 			* @return	void			*/			final public function previewLink( from : Anchor  ) : void {				//trc('drawMouseLink ::: '+from);								var oPT : Point = from.square.getRect( this ).bottomRight;								_spPREVIEW.graphics.clear();				_spPREVIEW.graphics.lineStyle( .1 , 0x696969 , .5 );				_spPREVIEW.graphics.moveTo( oPT.x , oPT.y );				_spPREVIEW.graphics.lineTo( mouseX , mouseY );							}						/**			* Clearing the anchor preview clip			* 			* @public			* @return	void			*/			final public function clearPreview() : void {				_spPREVIEW.graphics.clear();			}						/**			* edit function			* @public			* @param 			* @return			*/			final public function edit( o : AAction ) : void {								trc('edit :: '+o.variables);				_oXML = <root>			      		<entry label = "NONE" type = "title" prop='infottl'/>			      		</root>;			      _oXML.entry.@label = 'test';			      			      var i : int = 0;			      var l : int = o.variables.length;			      var e : XML = <entry label = 'Active' prop='active' 	type = "boolean" value = "false" />;			      var n : XML; 			      for( i ; i < l ; i++ ){			      	n = e.copy();			      	n.@label = o.variables[i];			      	n.@type = typeof(o.referenceInstance[n.@label]);			      	n.@value = o.referenceInstance[n.@label];			      	_oXML.appendChild(n);			      }			      				_oPROPS.dataProvider = _oXML;					}					// -------o protected					/**			* Redraw all the links between anchors			*			* @return	void			*/			final protected function _redrawLinks() : void {								var l : LinkItem;				_spPREVIEW.graphics.clear();				_spLINKS.graphics.clear();				_spLINKS.graphics.lineStyle( 1 , 0x0AB6F3 , 1 );								var oLIST : Vector.<LinkItem> = (model as MNevermind).links;				for each( l in oLIST ){					drawAnchorLink( l.from , l.to );				}			}					/**			* Calculate the list of values to draw from 			*			* @param 				* @return	point list (Vector.<Point>)			*/			final protected function bezierValues(a : Point, b : Point, c : Point, d : Point,_quality : uint = 4) : Vector.<Point> {				var i : uint = 0;				var vRES : Vector.<Point> = new Vector.<Point>(); 				for( i ; i <= _quality ; i++) { 					vRES.push(bezierValue(a, b, c, d, i / _quality)); 				} 				return vRES;			}  					/**			* Calculate a bezier interpolation			*			* @param 	a,b,c,d 	: bezier point ref 	( Point )			* @param 	t 		: Interpolation value 	(Number)			* @return	void			*/			final protected function bezierValue(a : Point, b : Point, c : Point, d : Point,t : Number) : Point {				if(t < 0 || t > 1) return null;				var _p4 : Point = Point.interpolate(b, a, t);				var _p5 : Point = Point.interpolate(c, b, t);				var _p6 : Point = Point.interpolate(d, c, t);				var _p7 : Point = Point.interpolate(_p5, _p4, t);				var _p8 : Point = Point.interpolate(_p6, _p5, t);				return Point.interpolate(_p8, _p7, t);			}							/**			* Running the view 			*			* @return	void			*/			final protected function _run() : void {				//					_spPREVIEW.mouseChildren = _spPREVIEW.mouseEnabled = false;					_spLINKS.mouseChildren = _spLINKS.mouseEnabled = false;					addChild( _spCONTAINER );					addChild( _spLINKS);					addChild( _spPREVIEW);								//					_menu();								//					controller.register( contextMenu , Event.SELECT , 	false , 10 , true ); 					controller.register( this , MouseEvent.MOUSE_DOWN , 	true 	, 10 , true );					controller.register( this , MouseEvent.CLICK , 	true 	, 10 , true );					//controller.register( this , MouseEvent.MOUSE_UP, 	true	, 10 , true );													}						/**			* Drawning the context menu			*			* @return	void			*/			final protected function _menu() : void {				contextMenu = new NativeMenu();				contextMenu.addEventListener( Event.DISPLAYING , _onMenuDisplay , false , 10 , true );												//					_oACTORS = new NativeMenu();					contextMenu.addSubmenu(_oACTORS , 'Actors');									//					var v : Vector.<String> = (model as MNevermind).codesList;					var c : Vector.<Class> = (model as MNevermind).classes;					var i : int;					var l : int = v.length;					var oN : NativeMenuItem;					var oS : NativeMenu;									//Actions					oS = new NativeMenu();					for( i = 0 ; i < l ; i++ ){						oN = new NativeMenuItem();						oN.label = oN.name = v[i] ;						oN.data = c[i];						oS.addItem( oN );					}					contextMenu.addSubmenu( oS , 'Actions' );			}						/**			* When the context menu is Displayed 			*			* @param 	e : display event ( Event )			* @return	void			*/			final protected function _onMenuDisplay( e : Event ) : void {				trc('onMenuDisplay ::: '+e);								//					_oACTORS.removeAllItems();										if( !GizmoContainer )						return;									//					var i : int = 0;					var l : int = GizmoContainer.numChildren;					var o : DisplayObject;					var n : NativeMenuItem;					for( i ; i < l ; i ++ ){						o = GizmoContainer.getChildAt( i );						n = new NativeMenuItem( o.name ); 						n.data = o;						_oACTORS.addItem( n );					}			}								// -------o misc			public static function trc(...args : *) : void {				Logger.log(VNevermind, args);			}	}}