/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.biskwy.views {	import org.shoebox.biskwy.data.LinkItem;	import org.shoebox.biskwy.items.PropsPanel;	import org.shoebox.biskwy.items.scriptsEditor.AAction;	import org.shoebox.biskwy.items.scriptsEditor.Action;	import org.shoebox.biskwy.items.scriptsEditor.Actor;	import org.shoebox.biskwy.items.scriptsEditor.Anchor;	import org.shoebox.biskwy.items.scriptsEditor.NevVariable;	import org.shoebox.biskwy.models.MNevermind;	import org.shoebox.patterns.factory.Factory;	import org.shoebox.patterns.mvc.abstracts.AView;	import org.shoebox.patterns.mvc.events.UpdateEvent;	import org.shoebox.patterns.mvc.interfaces.IView;	import org.shoebox.utils.logger.Logger;	import flash.display.NativeMenu;	import flash.display.NativeMenuItem;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Point;	/**	 * org.shoebox.biskwy.views.VNevermind	* @author shoebox	*/	public class VNevermind extends AView implements IView {				public static const REDRAW		:String = 'REDRAW';				protected var _spCONTAINER		:Sprite = new Sprite();		protected var _spLINKS			:Sprite = new Sprite();		protected var _spPREVIEW		:Sprite = new Sprite();		protected var _oPROPS			:PropsPanel;		protected var _oXML			:XML;				// -------o constructor					/**			* Constructor of the VNevermind class			*			* @public			* @return	void			*/			public function VNevermind() : void {												graphics.beginFill( 0xEAEAEA );				graphics.drawRect( 0 , 0 , 900 , 700 );								_oXML = <root>			      					<entry label = "INFOS" type = "title" prop='infottl'/>			      					<entry label = 'Active' 		prop='active' 	type = "boolean" value = "false" />			      					<entry label = 'Ground tile' 		prop='ground' 	type = "boolean" value = "false" />			      					<entry label = 'Element ID' 		prop='tileID' 	type = "string" value = "false" />			      					<entry label = 'Element Name' 	prop='name' 	type = "string" value = "false" />			      					<entry label = 'Categorie'	 	prop='cat'	 	type = "string" value = "false" />			      							      		</root>;								}		// -------o public						/**			* initialize function			* @public			* @param 			* @return			*/			override final public function initialize() : void {								_oPROPS = Factory.build( PropsPanel , { x : 900 } ) as PropsPanel ;				_oPROPS.setSize( 300 , 700 );				_oPROPS.dataProvider = _oXML;								addChild( _oPROPS );							}						/**			* update function			* @public			* @param 			* @return			*/			override final public function update( o : UpdateEvent = null ) : void {								switch( o.type ){										case REDRAW:						_redrawLinks();						break;											default:						_run();						break;									}						}												/**			* cancel function			* @public			* @param 			* @return			*/			override final public function cancel( e : Event = null ) : void {												}						/**			* create function			* @public			* @param 			* @return			*/			final public function create( s : String ) : void {				trace('create ::: '+s);								var oXML : XML = (model as MNevermind).getDesc(s); 				trace('oXML ::: '+oXML.@type);				var i : int , l : int , o : AAction;				switch( oXML.@type.toString() ){										case 'Action':						o  = new Action( oXML.title );						break;											case 'Actor':						o = new Actor( oXML.title );						break;											case 'Variable':						o = new NevVariable( oXML.title );						break;									}								//					if(!o)						return;											o.x = stage.mouseX;					o.y = stage.mouseY;										//					l = oXML.left..Anchor.length();					for( i = 0 ;i < l ;i++)						o.addAnchor(oXML.left..Anchor[i], true);													//										l = oXML.right..Anchor.length();					for( i = 0 ;i < l ;i++)						o.addAnchor(oXML.right..Anchor[i], false);								//									_spCONTAINER.addChild(o);			}						/**			* drawAnchorLink function			* @public			* @param 			* @return			*/			final public function drawAnchorLink( from : Anchor , to : Anchor ) : void {								var 	oP1 : Point = from.square.getRect(this).topLeft;					oP1.y += 4;									var 	oP4 : Point = to.square.getRect(this).topLeft;					oP4.y += 4;									var	nDI : Number = Point.distance( oP1 , oP4 );					nDI/= 2;									var	oP2 : Point = oP1.clone();					oP2.x += (from.right) ? -nDI : nDI;									var	oP3 : Point = oP4.clone();					oP3.x += (to.right) ? -nDI : nDI;								_spLINKS.graphics.lineStyle( 1 , 0x0AB6F3 , 1 , true );				_spLINKS.graphics.moveTo( oP1.x, oP1.y);								//									var vBEZIERS : Vector.<Point> = bezierValues(oP1, oP2, oP3, oP4, 50);					var oPT : Point;					for each( oPT in vBEZIERS) {						_spLINKS.graphics.lineTo( oPT.x, oPT.y );					}									//										var i : int = to.right ? 5 : -5;					_spLINKS.graphics.beginFill( 0x0AB6F3 );					_spLINKS.graphics.moveTo( oP4.x - i , oP4.y  - i );					_spLINKS.graphics.lineTo( oP4.x , oP4.y );					_spLINKS.graphics.lineTo( oP4.x - i , oP4.y  + i );					_spLINKS.graphics.lineTo( oP4.x - i , oP4.y  - i );					_spLINKS.graphics.endFill();			}									/**			* drawMouseLink function			* @public			* @param 			* @return			*/			final public function previewLink( from : Anchor  ) : void {				//trc('drawMouseLink ::: '+from);								var oPT : Point = from.square.getRect( this ).bottomRight;								_spPREVIEW.graphics.clear();				_spPREVIEW.graphics.lineStyle( .1 , 0x696969 , .5 );				_spPREVIEW.graphics.moveTo( oPT.x , oPT.y );				_spPREVIEW.graphics.lineTo( mouseX , mouseY );							}						/**			* clearPreview function			* @public			* @param 			* @return			*/			final public function clearPreview() : void {				_spPREVIEW.graphics.clear();			}					// -------o protected					/**			* 			*			* @param 			* @return			*/			final protected function _redrawLinks() : void {				trc('_redrawLinks');				var l : LinkItem;				_spPREVIEW.graphics.clear();				_spLINKS.graphics.clear();				_spLINKS.graphics.lineStyle( 1 , 0x0AB6F3 , 1 );				var oLIST : Vector.<LinkItem> = (model as MNevermind).links;				for each( l in oLIST ){					drawAnchorLink( l.from , l.to );				}			}					/**			* 			*			* @param 			* @return			*/			final protected function bezierValues(a : Point, b : Point, c : Point, d : Point,_quality : uint = 4) : Vector.<Point> {				var i : uint = 0;				var vRES : Vector.<Point> = new Vector.<Point>(); 				for( i ; i <= _quality ; i++) { 					vRES.push(bezierValue(a, b, c, d, i / _quality)); 				} 				return vRES;			}  					/**			* 			*			* @param 			* @return			*/			final protected function bezierValue(a : Point, b : Point, c : Point, d : Point,t : Number) : Point {				if(t < 0 || t > 1) return null;				var _p4 : Point = Point.interpolate(b, a, t);				var _p5 : Point = Point.interpolate(c, b, t);				var _p6 : Point = Point.interpolate(d, c, t);				var _p7 : Point = Point.interpolate(_p5, _p4, t);				var _p8 : Point = Point.interpolate(_p6, _p5, t);				return Point.interpolate(_p8, _p7, t);			}							/**			* 			*			* @param 			* @return			*/			final protected function _run() : void {				//					_spPREVIEW.mouseChildren = _spPREVIEW.mouseEnabled = false;					_spLINKS.mouseChildren = _spLINKS.mouseEnabled = false;					addChild( _spCONTAINER );					addChild( _spLINKS);					addChild( _spPREVIEW);								//					_menu();								//					controller.register( contextMenu , Event.SELECT , 	false , 10 , true ); 					controller.register( this , MouseEvent.MOUSE_DOWN , 	true 	, 10 , true );					//controller.register( this , MouseEvent.MOUSE_UP, 	true	, 10 , true );													}						/**			* 			*			* @param 			* @return			*/			final protected function _menu() : void {								contextMenu = new NativeMenu();								var oLIST : XMLList = (model as MNevermind).list;								var 	i : int , i2 : int , i3 : int;				var 	l : int = oLIST.length();								var	iLVL2	:int , iLVL3 : int;								var 	oITEM : NativeMenuItem;				var 	oSUB 	: NativeMenu;				var 	oSUB2 : NativeMenu;				var 	oSUB3 : NativeMenu;				var	oENTRY: XML;								for( i ; i < l ; i ++ ){										//						oENTRY = oLIST[i];						iLVL2 = oENTRY..item.length();						//trc('iLVL2 ::: ' + iLVL2);											//						if( iLVL2 > 0 ){														oSUB2 = new NativeMenu();														for( i2 = 0 ; i2 < iLVL2 ; i2++ ){																iLVL3 = oENTRY..item[i2]..sub.length();																if( iLVL3 > 0 ){																		oSUB3 = new NativeMenu();									for( i3 = 0 ; i3 < iLVL3 ; i3++ ){										oITEM = new NativeMenuItem( oENTRY..item[i2]..sub[i3].text );										oITEM.name = oENTRY..item[i2]..sub[i3].@id;										oSUB3.addItem( oITEM );									}									oSUB2.addSubmenu( oSUB3 , oENTRY..item[i2].text );								}else{																		oITEM = new NativeMenuItem( oENTRY..item[i2].text );									oITEM.name = oENTRY..item[i2].@id;									oSUB2.addItem( oITEM );								}							}														contextMenu.addSubmenu( oSUB2 , oLIST[i].text );													}else{							oITEM = new NativeMenuItem( oLIST[i].text );							oITEM.name = oLIST[i].@id;							contextMenu.addItem( oITEM );								}									}											}								// -------o misc			public static function trc(...args : *) : void {				Logger.log(VNevermind, args);			}	}}