/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.biskwy.views {	import org.shoebox.biskwy.core.IsoGrid;
	import org.shoebox.engine.data.mapDatas;
	import fl.controls.Button;	import fl.controls.CheckBox;	import fl.controls.ComboBox;	import fl.controls.NumericStepper;	import fl.controls.TextInput;	import org.shoebox.biskwy.controllers.TileEditorController;	import org.shoebox.biskwy.core.Config;	import org.shoebox.biskwy.items.PropsPanel;	import org.shoebox.biskwy.items.TileLayer;	import org.shoebox.biskwy.models.TileEditorModel;	import org.shoebox.patterns.factory.Factory;	import org.shoebox.patterns.mvc.abstracts.AView;	import org.shoebox.patterns.mvc.events.UpdateEvent;	import org.shoebox.patterns.mvc.interfaces.IView;	import org.shoebox.utils.logger.Logger;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Vector3D;	/**	 * org.shoebox.biskwy.views.TileEditorView	* @author shoebox	*/	public class TileEditorView extends AView implements IView{				protected var _oBUTTON			:Button;				protected var _oBUTTONCCL		:Button;				protected var _cbWALKABLE		:CheckBox;		protected var _cbACTIVE			:CheckBox;		protected var _oCOMBO			:ComboBox;		protected var _oSTEPPERX		:NumericStepper;		protected var _oSTEPPERY		:NumericStepper;		protected var _oPANEL			:PropsPanel;		protected var _spCONTAINER		:Sprite;		protected var _oLAYER			:TileLayer;				protected var _oINPUTID			:TextInput;			protected var _oINPUTNAME		:TextInput;			protected var _oINPUTFILE		:TextInput;			protected var _oXML			:XML;							// -------o constructor					public function TileEditorView() : void {							}		// -------o public						/**			* initialize function			* @public			* @param 			* @return			*/			final override public function initialize() : void {								graphics.beginFill(0x2A2A2A);				graphics.drawRect(300 , 0 , 650 , 800);				graphics.endFill();								graphics.beginFill(0xCCCCCC);				graphics.drawRect( 0 , 510 , 300 , 100);				graphics.endFill();								//					_oXML = <root>			      					<entry label = "INFOS" type = "title" prop='infottl'/>			      					<entry label = 'Active' 		prop='active' 	type = "boolean" value = "false" />			      					<entry label = 'Element ID' 		prop='tileID' 	type = "string" value = "false" />			      					<entry label = 'Element Name' 	prop='name' 	type = "string" value = "false" />			      					<entry label = 'Categorie'	 	prop='cat'	 	type = "string" value = "false" />			      								      					<entry label = "MEDIA" type = "title" prop='mediattl'/>			      					<entry label = 'Source file'	 	prop='filepath' 	type = "string" value = "false" />			      					<entry label = 'X decal'	 	prop='decalX' 	type = "number" value = "0"  min = "-1500"  max = "1500"/>			      					<entry label = 'Y decal'	 	prop='decalY' 	type = "number" value = "0"  min = "-1500"  max = "1500"/>			      								      					<entry label = "COLLISIONS" type = "title" prop="colttl"/>			      					<entry prop='collide' type = "boolean"	value = "false" label = 'Collidable'>			      						<sub prop = 'collidT' type = 'boolean' value = 'false' label = 'Colldable Top'/>			      						<sub prop = 'collidL' type = 'boolean' value = 'false' label = 'Colldable Left'/>			      						<sub prop = 'collidB' type = 'boolean' value = 'false' label = 'Colldable Bottom'/>			      						<sub prop = 'collidR' type = 'boolean' value = 'false' label = 'Colldable Right'/>			      					</entry>			      								      					<entry label = "RIGID BODY" type = "title" prop='mediattl'/>			      					<entry prop='rigid' 	type = "boolean"	value = "false" 	label = 'Is rigid body'>			      						<sub prop='mass' 	type = "number"	value = "0" 	label = 'Mass' />			      					</entry>			      				</root>;			      						      		_oPANEL = new PropsPanel();		      		_oPANEL.setSize(300, 500);		      				      		addChild( _oPANEL);		      				      	//		      		_oBUTTON = Factory.build(Button , {x : 5 , y  :520 , label : 'VALIDATE' , width : 290 , name:'validate'});		      		addChild( _oBUTTON );		      				      	//		      		_oBUTTONCCL = Factory.build(Button , {x : 5 , y  : 550 , label : 'CANCEL' , width : 290 , name:'cancel'});		      		addChild(_oBUTTONCCL);								_preview();												(controller as TileEditorController).register(this,Event.CHANGE,true,0,true);				(controller as TileEditorController).register(this , MouseEvent.CLICK , true , 10 , true);				//(controller as TileEditorController).register(_oCOMBO , ComponentEvent.ENTER, false , 10 , true);							}						/**			* get combo function			* @public			* @param 			* @return			*/			public function get combo() : ComboBox {				return _oCOMBO;			}						/**			* update function			* @public			* @param 			* @return			*/			final override public function update( o : UpdateEvent = null ) : void {				trc('update');								//										var s : String;					if(_oXML){												//							var v : Vector.<String> = Vector.<String>(['tileID','name','cat','filepath','decalX','decalY']);							var u : uint = 0;							var l : uint = v.length;							for( u ; u < l ; u++ ){								trace(u+ '   :::: '+v[u]);								trace('--- '+_oXML..entry.(@prop == v[u]));								_oXML..entry.(String(@prop) == v[u]).@value = (model as TileEditorModel)[v[u]]; 							}							trace(_oXML);												//							trc('draw props');							v = Vector.<String>(['collide','active']);							l = v.length;							u = 0;							for( u ; u < l ; u++ ){								if((model as TileEditorModel).property(v[u])!==undefined)									_oXML..entry.(String(@prop) == v[u]).@value = (model as TileEditorModel).property(v[u]).toString(); 							}					}										trace(_oXML);														_oPANEL.dataProvider = _oXML;					_oLAYER.id = (model as TileEditorModel).tileID;								/*				trc('update ::: '+(model as TileEditorModel).tileID);				_oINPUTID.text =  (model as TileEditorModel).tileID+'';				_oINPUTNAME.text = ((model as TileEditorModel).name == null) ? "" : (model as TileEditorModel).name;				_oINPUTFILE.text = (model as TileEditorModel).filepath;				_oSTEPPERX.value = (model as TileEditorModel).decalX;				_oSTEPPERY.value = (model as TileEditorModel).decalY;				_cbWALKABLE.selected = Boolean((model as TileEditorModel).property('walkable'));				_cbACTIVE.selected = Boolean((model as TileEditorModel).property('active'));								_oCOMBO.dataProvider = (model as TileEditorModel).cats;								if((model as TileEditorModel).cat!==null){										var i : int = 0;					var l : uint = _oCOMBO.dataProvider.length;					for(i ; i < l ; i++){						trace('----'+(model as TileEditorModel).cats.getItemAt(0).label+' // '+(model as TileEditorModel).cat);						if((model as TileEditorModel).cats.getItemAt(i).label == (model as TileEditorModel).cat){							_oCOMBO.selectedIndex = i;							break;						}											}									}				*/									//_oLAYER.addEventListener( Event.COMPLETE , _onResponse , false , 10 , true);			}						/**			* isActive function			* @public			* @param 			* @return			*/			public function get isActive() : Boolean {				return _cbACTIVE.selected;			}						/**			* isWalkable function			* @public			* @param 			* @return			*/			public function get isWalkable() : Boolean {				return _cbWALKABLE.selected;			}						/**			* get cat function			* @public			* @param 			* @return			*/			public function get cat() : String {				trc('get cat ::: '+_oCOMBO.selectedItem);				if(_oCOMBO.selectedItem==null)					return null;				trc('get cat ::: '+_oCOMBO.selectedItem.label);												return _oCOMBO.selectedItem.label;			}			/**			* cancel function			* @public			* @param 			* @return			*/			final override public function cancel( e : Event = null ) : void {									}						/**			* change function			* @public			* @param 			* @return			*/			public function change() : void {				var o : Object = _oPANEL.getDatas();				_oLAYER.decal = new Vector3D( o.decalX , o.decalY , 0);			}						/**			* get datas function			* @public			* @param 			* @return			*/			public function get datas() : Object {				return _oPANEL.getDatas();			}					// -------o protected						/**			* 			*			* @param 			* @return			*/			protected function _onResponse( e : Event ) : void {				_oSTEPPERX.value = _oLAYER.decal.x;				_oSTEPPERY.value = _oLAYER.decal.y;							}						/**			* 			*			* @param 			* @return			*/			protected function _preview() : void {				//					_oLAYER = new TileLayer();						_oLAYER.x = 550;					_oLAYER.y = 300;					addChild(_oLAYER);												//					_spCONTAINER = new Sprite();					_spCONTAINER.graphics.lineStyle( .1 , 0xFF0000 , 1 , true);					_spCONTAINER.x = 550;					_spCONTAINER.y = 300;					addChild(_spCONTAINER);								if(Config.GRIDTYPE == IsoGrid){						//						var w : Number = Config.TILESIZE;						var h : Number = Config.TILESIZE / 2;										//												_spCONTAINER.graphics.moveTo( 0 , h / 2);						_spCONTAINER.graphics.lineTo( w/2 , 0 );						_spCONTAINER.graphics.lineTo( w , h/2 );						_spCONTAINER.graphics.lineTo( w/2 , h );						_spCONTAINER.graphics.lineTo( 0 , h/2 );																}else{										//						_spCONTAINER.graphics.drawRect( 0 , 0 , Config.TILESIZE , Config.TILESIZE );										}			}					// -------o misc			public static function trc(arguments : *) : void {				Logger.log(TileEditorView, arguments);			}	}}