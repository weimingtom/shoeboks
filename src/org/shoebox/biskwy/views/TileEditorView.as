/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.biskwy.views {	import fl.containers.ScrollPane;	import fl.controls.Button;	import fl.controls.CheckBox;	import fl.controls.ComboBox;	import fl.controls.NumericStepper;	import fl.controls.ScrollPolicy;	import fl.controls.TextInput;	import org.shoebox.biskwy.controllers.TileEditorController;	import org.shoebox.biskwy.core.Config;	import org.shoebox.biskwy.core.IsoGrid;	import org.shoebox.biskwy.items.PropsPanel;	import org.shoebox.biskwy.items.TileLayer;	import org.shoebox.biskwy.models.TileEditorModel;	import org.shoebox.patterns.factory.Factory;	import org.shoebox.patterns.mvc.abstracts.AView;	import org.shoebox.patterns.mvc.events.UpdateEvent;	import org.shoebox.patterns.mvc.interfaces.IView;	import org.shoebox.utils.logger.Logger;	import flash.display.BitmapData;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Rectangle;	import flash.geom.Vector3D;	/**	 * org.shoebox.biskwy.views.TileEditorView	* @author shoebox	*/	public class TileEditorView extends AView implements IView{				protected var _oBUTTON			:Button;				protected var _oBUTTONCCL		:Button;				protected var _cbWALKABLE		:CheckBox;		protected var _cbACTIVE		:CheckBox;		protected var _oCOMBO			:ComboBox;		protected var _oSTEPPERX		:NumericStepper;		protected var _oSTEPPERY		:NumericStepper;		protected var _oPANEL			:PropsPanel;		protected var _spREF_SPRITE		:Sprite;		protected var _spCONTAINER		:Sprite;		protected var _oSCROLL_PANE		:ScrollPane;		protected var _oLAYER			:TileLayer;				protected var _oINPUTID		:TextInput;			protected var _oINPUTNAME		:TextInput;			protected var _oINPUTFILE		:TextInput;		protected var _oTEXT			:BitmapData;		protected var _oXML			:XML;							// -------o constructor					public function TileEditorView() : void {				_oTEXT = new BitmapData( Config.TILESIZE * 2 , Config.TILESIZE * 2 , false , 0 );				_oTEXT.fillRect( new Rectangle( 0 , 0 , Config.TILESIZE , Config.TILESIZE ) , 0x2a2a2a );				_oTEXT.fillRect( new Rectangle( Config.TILESIZE , Config.TILESIZE , Config.TILESIZE , Config.TILESIZE ) , 0x2a2a2a );			}		// -------o public						/**			* initialize function			* @public			* @param 			* @return			*/			final override public function initialize() : void {				trc('initialize');								//					_oPANEL = new PropsPanel();		      		_oPANEL.setSize(300, 500);		      		_oPANEL.dataProvider = (model as TileEditorModel).dataProvider;		      		addChild( _oPANEL);		      				      	//		      		_oBUTTON = Factory.build(Button , {x : 5 , y  :520 , label : 'VALIDATE' , width : 290 , name:'validate'});		      		addChild( _oBUTTON );		      				      	//		      		_oBUTTONCCL = Factory.build(Button , {x : 5 , y  : 550 , label : 'CANCEL' , width : 290 , name:'cancel'});		      		addChild(_oBUTTONCCL);		      		      										_preview();												(controller as TileEditorController).register(this,Event.CHANGE,true,0,true);				(controller as TileEditorController).register(this , MouseEvent.CLICK , true , 10 , true);				//(controller as TileEditorController).register(_oCOMBO , ComponentEvent.ENTER, false , 10 , true);				if( stage )					_onStaged( );				else					addEventListener( Event.ADDED_TO_STAGE , _onStaged , false , 10 , true );							}						/**			* get combo function			* @public			* @param 			* @return			*/			public function get combo() : ComboBox {				return _oCOMBO;			}						/**			* update function			* @public			* @param 			* @return			*/			final override public function update( o : UpdateEvent = null ) : void {				trc('update');								//					if( _oPANEL )						_oPANEL.dataProvider = (model as TileEditorModel).dataProvider;								//					_oLAYER.fill( (model as TileEditorModel).tileID , 0 );					_oLAYER.graphics.beginFill( 0x2A2A2A , 0 );					_oLAYER.graphics.drawRect( _oLAYER.width , 0, 300 , _oLAYER.height );					_oLAYER.graphics.endFill();					_oSCROLL_PANE.update( );								}			/**			* isActive function			* @public			* @param 			* @return			*/			public function get isActive() : Boolean {				return _cbACTIVE.selected;			}						/**			* isWalkable function			* @public			* @param 			* @return			*/			public function get isWalkable() : Boolean {				return _cbWALKABLE.selected;			}						/**			* get cat function			* @public			* @param 			* @return			*/			public function get cat() : String {				if(_oCOMBO.selectedItem==null)					return null;								return _oCOMBO.selectedItem.label;			}			/**			* cancel function			* @public			* @param 			* @return			*/			final override public function cancel( e : Event = null ) : void {									}						/**			* change function			* @public			* @param 			* @return			*/			public function change() : void {				var o : Object = _oPANEL.getDatas();				_oLAYER.decal = new Vector3D( o.decalX , o.decalY , 0);			}						/**			* get datas function			* @public			* @param 			* @return			*/			public function get datas() : Object {				return _oPANEL.getDatas();			}					// -------o protected						/**			* 			*			* @param 			* @return			*/			final protected function _onStaged( e : Event = null ) : void {				stage.addEventListener( Event.RESIZE , _onResize , false , 10 , true );				if( e )					removeEventListener( Event.ADDED_TO_STAGE , _onStaged , false );				_onResize();			}						/**			* 			*			* @param 			* @return			*/			protected function _onResponse( e : Event ) : void {				_oSTEPPERX.value = _oLAYER.decal.x;				_oSTEPPERY.value = _oLAYER.decal.y;							}						/**			* 			*			* @param 			* @return			*/			protected function _preview() : void {				//					_oLAYER = new TileLayer();					_oLAYER.x = _oLAYER.y = 300 - Config.TILESIZE / 2;						_oLAYER.fill( (model as TileEditorModel).tileID , 0 );					_oLAYER.graphics.beginFill( 0x2A2A2A , 0 );					_oLAYER.graphics.drawRect( _oLAYER.width , 0, 300 , _oLAYER.height );					_oLAYER.graphics.endFill();													//					_spREF_SPRITE = new Sprite();					_spREF_SPRITE.graphics.lineStyle( .1 , 0xFF0000 , 1 , true);					_spREF_SPRITE.x = _spREF_SPRITE.y = 300 - Config.TILESIZE / 2;				//					_spCONTAINER = new Sprite();					_spCONTAINER.x = 300;					_spCONTAINER.addChild(_oLAYER);									_spCONTAINER.addChild(_spREF_SPRITE);					addChild( _spCONTAINER );								//					_oSCROLL_PANE = Factory.build( ScrollPane , { 													source : _spCONTAINER , 													x : 300,													width : 600, height : 580												} );																	_oSCROLL_PANE.horizontalScrollPolicy = ScrollPolicy.AUTO;					_oSCROLL_PANE.verticalScrollPolicy = ScrollPolicy.AUTO;					addChild( _oSCROLL_PANE );					_oSCROLL_PANE.update();													if(Config.GRIDTYPE == IsoGrid){											//						var w : Number = Config.TILESIZE;						var h : Number = Config.TILESIZE / 2;										//												_spREF_SPRITE.graphics.moveTo( 0 , h / 2);						_spREF_SPRITE.graphics.lineTo( w/2 , 0 );						_spREF_SPRITE.graphics.lineTo( w , h/2 );						_spREF_SPRITE.graphics.lineTo( w/2 , h );						_spREF_SPRITE.graphics.lineTo( 0 , h/2 );																}else{										//						_spREF_SPRITE.graphics.drawRect( 0 , 0 , Config.TILESIZE , Config.TILESIZE );										}			}						/**			* 			*			* @param 			* @return			*/			final protected function _onResize( e : Event  = null ) : void {												graphics.clear();								graphics.beginBitmapFill(_oTEXT);				graphics.drawRect(300 , 0 , stage.stageWidth - 300 , stage.stageHeight);				graphics.endFill();								graphics.beginFill(0xCCCCCC);				graphics.drawRect( 0 , stage.stageHeight - 70 , 300 , 150);				graphics.endFill();								_oPANEL.setSize(300, stage.stageHeight - 70 );				_oBUTTON.y = stage.stageHeight - 60;				_oBUTTONCCL.y = stage.stageHeight - 30;				if( _oSCROLL_PANE )					_oSCROLL_PANE.setSize( stage.stageWidth - 300 , stage.stageHeight);							}					// -------o misc			public static function trc(arguments : *) : void {				Logger.log(TileEditorView, arguments);			}	}}