/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.biskwy.views.scripts {	import fl.containers.ScrollPane;	import fl.controls.Button;	import fl.controls.ComboBox;	import fl.controls.ScrollPolicy;	import org.shoebox.biskwy.commands.scripts.AScript;	import org.shoebox.biskwy.data.TriggerScript;	import org.shoebox.biskwy.items.PropsPanel;	import org.shoebox.biskwy.items.ScriptItem;	import org.shoebox.biskwy.models.MScriptEditor;	import org.shoebox.display.DisplayFuncs;	import org.shoebox.display.text.TextFormatter;	import org.shoebox.patterns.factory.Factory;	import org.shoebox.patterns.mvc.abstracts.AView;	import org.shoebox.patterns.mvc.events.UpdateEvent;	import org.shoebox.patterns.mvc.interfaces.IView;	import org.shoebox.utils.logger.Logger;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormatAlign;	/**	 * org.shoebox.biskwy.views.scripts.VScriptEditor	* @author shoebox	*/	public class VScriptEditor extends AView implements IView {				protected var _btnADDSCR		:Button;		protected var _btnAPPLY			:Button;		protected var _btnCANCEL		:Button;		protected var _cbSCRIPTS		:ComboBox;		protected var _oTRRIGERPANEL		:PropsPanel;		protected var _oINFOSPANEL		:PropsPanel;		protected var _oSCROLLER		:ScrollPane;		protected var _spRIGHT			:Sprite = new Sprite();		protected var _spSCRIPTS		:Sprite = new Sprite();		protected var _uINC			:uint = 0;				// -------o constructor					/**			* Constructor of the VScriptEditor class			*			* @public			* @return	void			*/			public function VScriptEditor() : void {			}		// -------o public						/**			* View initialisation (override of the <code>AView</code> class)			* 			* @public			* @return void			*/			final override public function initialize() : void {				_draw();				controller.register( _cbSCRIPTS , Event.CHANGE , false , 10 , true );				controller.register( _spSCRIPTS , MouseEvent.MOUSE_OVER , true , 10 , true );				controller.register( _spSCRIPTS , MouseEvent.MOUSE_OUT , true , 10 , true );				controller.register( _spSCRIPTS , MouseEvent.CLICK , true , 10 , true );			}			/**			* When the view receive an update			* 			* @public			* @param	o : optional update event ( UpdateEvent )			* @return	void			*/			override final public function update(o:UpdateEvent = null) : void {								switch( o.type ){										case MScriptEditor.CREATE:						_addScript( o.datas as TriggerScript );						break;										case MScriptEditor.EDIT:						_oINFOSPANEL.dataProvider = (o.datas.ref as AScript).params as XML;						break;											case MScriptEditor.INIT:						_cbSCRIPTS.dataProvider 	= (model as MScriptEditor).scriptsDP;						_oTRRIGERPANEL.dataProvider 	= (model as MScriptEditor).triggerXML;						break;				}			}												/**			* When the view is canceled			* 			* @public			* @param	e : optional event (Event) 			* @return	void			*/			override final public function cancel(e:Event = null) : void {				controller.unRegister( _cbSCRIPTS , Event.CHANGE 		, false );				controller.unRegister( _spSCRIPTS , MouseEvent.MOUSE_OVER 	, true );				controller.unRegister( _spSCRIPTS , MouseEvent.MOUSE_OUT 	, true );				controller.unRegister( _spSCRIPTS , MouseEvent.CLICK 		, true );				}						/**			* Getter of <code>ComboBox</code> selected ID			* 			* @public			* @return	selected ID (uint)			*/			public function get selectedScriptID() : uint {				return _cbSCRIPTS.selectedIndex;			}						/**			* Return the XML dataprovider of the script props panel			* 			* @public			* @return	xml	: XML			*/			public function get scriptXML() : XML {				return _oINFOSPANEL.dataProvider;			}					// -------o protected						/**			* Drawning the view			*			* @return	void			*/			protected function _draw() : void {								//					_spRIGHT.x = 300;					graphics.lineStyle( 1 , 0x2A2A2A , .4 );					graphics.moveTo( 300 , 0 );					graphics.lineTo( 300 , 600 );					graphics.moveTo( 310 , 66 );					graphics.lineTo( 790 , 66 );									//					_oTRRIGERPANEL = new PropsPanel();					_oTRRIGERPANEL.setSize( 290 , 600 );								//					_oINFOSPANEL = new PropsPanel();					_oINFOSPANEL.x = 310;					_oINFOSPANEL.y = 225;					_oINFOSPANEL.setSize( 480 , 225 );													//					graphics.lineStyle( 1 , 0x2A2A2A , .3 );					graphics.drawRect( 310 , 74 , 480 , 140 );					_spSCRIPTS.x = 10;					_spSCRIPTS.y = 75;								//						_oSCROLLER = new ScrollPane();					_oSCROLLER.x = 10;					_oSCROLLER.y = 75;					_oSCROLLER.setSize( 480 , 140 );					_oSCROLLER.horizontalScrollPolicy = ScrollPolicy.OFF;									//					var oTF : TextField = Factory.build( TextField , { 														text : 'Script class :' , 														x : 10 , y : 10 , 														width : 200 , 														embedFonts : true													});					TextFormatter.apply( oTF , 8 ,'PF Tempesta Seven',TextFormatAlign.LEFT,TextFieldAutoSize.LEFT);									//					_cbSCRIPTS 	= Factory.build( ComboBox , { 												x : oTF.x , y : oTF.y + oTF.height + 5 , 												width : 250 												} );									//					_btnADDSCR 	= Factory.build( Button , { 											x : 270 , y : oTF.y + oTF.height + 5 , 											label : 'Add script' , 											width : 100 , name : 'addscript'											} );																_btnAPPLY 	= Factory.build( Button , { 													label:'Apply' , 													width : 235 , 												x : 10 , y : 465 , name : 'apply'											} );																				_btnCANCEL 	= Factory.build( Button , { 												label:'Cancel' , 													width : 235 , 												x : 255 , y : 465 , name : 'cancel'											} );													//					_spRIGHT.addChild(oTF);					_spRIGHT.addChild(_cbSCRIPTS);					_spRIGHT.addChild(_btnADDSCR);					_spRIGHT.addChild(_spSCRIPTS);					_spRIGHT.addChild(_btnAPPLY);					_spRIGHT.addChild(_btnCANCEL);					_spRIGHT.addChild(_oSCROLLER);										addChild(_oTRRIGERPANEL);					addChild(_oINFOSPANEL);					addChild(_spRIGHT);										_oSCROLLER.source = _spSCRIPTS;										controller.register( _spRIGHT , MouseEvent.CLICK , true , 10 , false );					controller.register( _oTRRIGERPANEL , Event.CHANGE , true , 10 , false );			}						/**			* Adding a new script in to the list			*			* @param 	o : TriggerScript 			* @return	void			*/			protected function _addScript( o : TriggerScript ) : void {								var 	oITEM : ScriptItem = Factory.build( ScriptItem , { script : o } );					oITEM.draw( (_uINC%2!==0) );								_spSCRIPTS.addChild( oITEM );				DisplayFuncs.distributeY(_spSCRIPTS);								_oSCROLLER.update();				_uINC++;			}					// -------o misc			public static function trc(...args : *) : void {				Logger.log(VScriptEditor, args);			}	}}