/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.biskwy.commands.tools {	import org.shoebox.biskwy.commands.CommandWindowPosition;	import org.shoebox.biskwy.controllers.CGroups;	import org.shoebox.biskwy.core.variables.CurrentMap;	import org.shoebox.biskwy.events.GridTileEvent;	import org.shoebox.biskwy.items.GridTile;	import org.shoebox.biskwy.models.MGroups;	import org.shoebox.biskwy.views.VGroups;	import org.shoebox.events.EventCentral;	import org.shoebox.libs.pimpmyair.behaviors.ZWindow;	import org.shoebox.libs.pimpmyair.utils.NativeWindowUtils;	import org.shoebox.patterns.commands.ICommand;	import org.shoebox.patterns.factory.Factory;	import org.shoebox.patterns.mvc.commands.MVCCommand;	import org.shoebox.patterns.singleton.ISingleton;	import org.shoebox.utils.logger.Logger;	import flash.display.NativeWindow;	import flash.display.NativeWindowInitOptions;	import flash.display.NativeWindowSystemChrome;	import flash.display.NativeWindowType;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.geom.Point;	import flash.geom.Vector3D;	/**	 * Groups tool  	* 	* org.shoebox.biskwy.commands.tools.ToolGroups	* @author shoebox	*/	public class ToolGroups extends ATool implements ICommand , ISingleton{				protected var _oPOS		: CommandWindowPosition;		protected var _oCOMM		: MVCCommand;		protected var _oWINDOW		: NativeWindow;		protected var _ptSIZE		: Point;				protected static var __instance		:ToolGroups = null;				// -------o constructor					/**			* Constructor of the ToolGroups class			*			* @public			* @return	void			*/			public function ToolGroups( e : SingletonEnforcer ) : void {				_oCOMM = new MVCCommand( { modelClass : MGroups , viewClass : VGroups , controllerClass : CGroups } );			}		// -------o public						/**			* When the tool is executed			* 			* @public			* @param	e : optional event (Event) 			* @return	void			*/			final override public function onExecute( e : Event = null ) : void {				trc('onExecute ::: '+e);				_initWindow();								EventCentral.getInstance().addEventListener( GridTileEvent.GRIDTILE_OVER, _onEvent , false , 10 , true );				EventCentral.getInstance().addEventListener( GridTileEvent.GRIDTILE_CLICK, _onEvent , false , 10 , true);			}						/**			* When the tool is canceled			* 			* @public			* @param	e : optional event (Event) 			* @return	void			*/			final override public function onCancel( e : Event = null ) : void {				trc('onCancel ::: '+ e);				if(_oWINDOW)					_oWINDOW.close();					_oWINDOW = null;				_bISCANCEL = false;								if(CurrentMap)					CurrentMap.out();				_oPOS.cancel();				EventCentral.getInstance().removeEventListener( GridTileEvent.GRIDTILE_OVER, _onEvent , false );				EventCentral.getInstance().removeEventListener( GridTileEvent.GRIDTILE_CLICK, _onEvent , false );			}						/**			* setSize function			* @public			* @param 			* @return			*/			public function setSize( w : uint , h : uint ) : void {				_ptSIZE = new Point( w , h );			}		// -------o protected						/**			* Initialization of the groups window			*			* @return void			*/			protected function _initWindow() : void {								//					var	oOPT:NativeWindowInitOptions = new NativeWindowInitOptions();						oOPT.resizable = oOPT.maximizable = oOPT.minimizable =  false;						oOPT.systemChrome = NativeWindowSystemChrome.STANDARD;						oOPT.type = NativeWindowType.UTILITY;								//					_oWINDOW = new NativeWindow( oOPT );					_oWINDOW.visible = false;					_oWINDOW.width = 170;					_oWINDOW.height = 250;					_oWINDOW.title = 'Groups';					_oWINDOW.stage.scaleMode = StageScaleMode.NO_SCALE;					_oWINDOW.stage.align = StageAlign.TOP_LEFT;					_oWINDOW.addEventListener( Event.CLOSE , _onClose , false , 10 , true );					_oPOS = Factory.build( CommandWindowPosition , { refWindow : _oWINDOW , windowId : 'GroupsWindow'}) as CommandWindowPosition;					_oPOS.execute();					_oWINDOW.activate();									//						_oCOMM.container = _oWINDOW.stage;					_oCOMM.execute();								//						NativeWindowUtils.resizeWindow(_oWINDOW,170,250);					////ZWindow.getInstance().register( _oWINDOW , 50000 );							}						/**			* 			*			* @param 			* @return			*/			protected function _onClose ( e : Event ) : void {				_oCOMM.cancel();			}						/**			* 			*			* @param 			* @return			*/			protected function _onEvent( e : GridTileEvent ) : void {				trc('onEvent ::: '+e.gridTile.position+' /// '+_ptSIZE);								if(_ptSIZE==null)					return;									if(!e.gridTile)					return;									var v : Vector.<GridTile> = _getTileRec(e.gridTile.position.x , e.gridTile.position.y - (_ptSIZE.y - 1), _ptSIZE.x ,_ptSIZE.y );				if( v == null )					return;									if(CurrentMap)					CurrentMap.out();				switch(e.type){										case GridTileEvent.GRIDTILE_OVER:						v.forEach( _over);						break;											case GridTileEvent.GRIDTILE_CLICK:						_fill( e.gridTile.position );						break;									}							}						/**			* Highlight on roll of the specified grild tile			*			* @param	g : Grid tile	(GridTile)			* @param	u : Position in to the vector (uint)			* @param	v : source vector	(Vector.<GridTile>) 			* @return	void			*/			protected function _over( g : GridTile , u : uint , v : Vector.<GridTile> ) : void {				g.over();			}						/**			* On click fill the tile with the selected ID in to the Tiles App 			*			* @param	g : Grid tile	(GridTile)			* @param	u : Position in to the vector (uint)			* @param	v : source vector	(Vector.<GridTile>) 			* @return	void			*/			protected function _fill( pos : Vector3D ) : void {				trc('fill ::: '+pos);								var iINC : uint = 0;				var uLEN : uint = (_oCOMM.model as MGroups).content.length;				var oTIL : GridTile;				var vVEC : Vector.<int>;								var l : uint;				var i : uint;								for( iINC ; iINC < uLEN ; iINC++ ){					oTIL = CurrentMap.getTileAt( pos.x + iINC, pos.y);										if(oTIL == null)						continue;											vVEC = (_oCOMM.model as MGroups).content[iINC] as Vector.<int>;										l = vVEC.length;					i = 0;					/*					for( i ; i < l ; i+=2 )						oTIL.container.fill( { id : vVEC[i] } , -vVEC[i+1] , true );						*/									}									}					// -------o misc			public static function trc(...args : *) : void {				Logger.log(ToolGroups, args);			}						/**			* Return the singleton instance of the class			* @public			* @return instance of the class (ToolGroups)			*/			static public function getInstance() : ToolGroups {								if( !__instance )					__instance = new ToolGroups( new SingletonEnforcer() );												return __instance;			}	}}internal class SingletonEnforcer{	}