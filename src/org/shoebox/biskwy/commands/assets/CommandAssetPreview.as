/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.biskwy.commands.assets {
	import org.shoebox.display.DisplayFuncs;
	import flash.net.URLRequest;
	import flash.display.Loader;
	import org.shoebox.biskwy.core.variables.TilesCache;
	import flash.display.Bitmap;
	import org.shoebox.biskwy.core.Config;
	import flash.geom.Rectangle;
	import flash.display.BitmapData;
	import fl.controls.ScrollPolicy;
	import org.shoebox.patterns.factory.Factory;
	import flash.display.NativeWindowInitOptions;
	import flash.display.NativeWindowSystemChrome;
	import flash.display.NativeWindowType;
	import flash.display.StageAlign;
	import flash.display.StageScaleMode;
	import fl.containers.ScrollPane;
	import flash.display.Sprite;
	import org.shoebox.patterns.singleton.ISingleton;
	import flash.display.NativeWindow;
	import org.shoebox.biskwy.items.AssetItem;
	import org.shoebox.patterns.commands.AbstractCommand;	import org.shoebox.patterns.commands.ICommand;	import org.shoebox.utils.logger.Logger;	import flash.events.Event;	/**	* org.shoebox.biskwy.commands.assets.CommandAssetPreview	* @author shoebox	*/	public class CommandAssetPreview extends AbstractCommand implements ICommand , ISingleton {				protected var _oASSET				: AssetItem;		protected var _bINIT				: Boolean;		protected var _oLOADER				: Loader;		protected var _oWINDOW				: NativeWindow;		protected var _oSCROLL_PANE			: ScrollPane;		protected var _spCONTAINER			: Sprite;		protected var _spBACK				: Sprite;				// -------o constructor					/**			* Constructor of the AScript command class			*			* @public			* @return	void			*/			public function CommandAssetPreview( e : SingletonEnforcer ) : void {				cancelable = false;				}		// -------o public						/**			* Execution of the command			* 			* @public			* @param	e : optional event (Event) 			* @return	void			*/			override public function onExecute( e : Event = null ) : void {							if( !_bINIT )					_init();							}						/**			* When the command is canceled			* 			* @public			* @param	e : optional event (Event)	 			* @return	void			*/			override public function onCancel( e : Event = null ) : void {								_bINIT = false;								if( _oWINDOW ) {										if( _oWINDOW.stage )						_oWINDOW.stage.removeEventListener( Event.RESIZE , _onResize , false );										if( _oWINDOW.hasEventListener(Event.CLOSE ))						_oWINDOW.removeEventListener( Event.CLOSE , _onClosed , false );				}
							}						/**			* run function			* @public			* @param 			* @return			*/			final public function run( o : AssetItem ) : void {				_oASSET = o;				_update();			}					// -------o protected						/**			* 			*			* @param 			* @return			*/			final protected function _init() : void {								//					var	oOPT : NativeWindowInitOptions = new NativeWindowInitOptions();						oOPT.systemChrome = NativeWindowSystemChrome.ALTERNATE;						oOPT.type = NativeWindowType.NORMAL;											var 	oWIN : NativeWindow = new NativeWindow( oOPT );						oWIN.title = 'Asset preview';						oWIN.alwaysInFront = true;						oWIN.stage.scaleMode = StageScaleMode.NO_SCALE;						oWIN.stage.align = StageAlign.TOP_LEFT;						oWIN.addEventListener( Event.CLOSE , _onClosed , false , 10 , true );						oWIN.activate();						oWIN.stage.stageWidth = 1000;						oWIN.stage.stageHeight = 700;										_oWINDOW = oWIN;					_oWINDOW.stage.addEventListener( Event.RESIZE , _onResize , false , 10 , true );									// 					_spBACK = new Sprite();
					oWIN.stage.addChild(_spBACK );													//					_spCONTAINER = new Sprite();					oWIN.stage.addChild( _spCONTAINER );								//					_oSCROLL_PANE = Factory.build( ScrollPane , { 													source : _spCONTAINER , 													width : 700, height : 700												} );																	_oSCROLL_PANE.horizontalScrollPolicy = ScrollPolicy.AUTO;					_oSCROLL_PANE.verticalScrollPolicy = ScrollPolicy.AUTO;					oWIN.stage.addChild( _oSCROLL_PANE );					_oSCROLL_PANE.update();
								_bINIT = true;							}						/**			* 			*			* @param 			* @return			*/			final protected function _onResize( e : Event = null ) : void {				trc('_onResize');								//					var 	oTEXT : BitmapData = new BitmapData( Config.TILESIZE * 2 , Config.TILESIZE * 2 , false , 0 );						oTEXT.fillRect( new Rectangle( 0 , 0 , Config.TILESIZE , Config.TILESIZE ) , 0x2a2a2a );						oTEXT.fillRect( new Rectangle( Config.TILESIZE , Config.TILESIZE , Config.TILESIZE , Config.TILESIZE ) , 0x2a2a2a );								//					with( _spBACK.graphics ) {						clear();						beginBitmapFill( oTEXT );						drawRect( 0 , 0 , _oWINDOW.stage.stageWidth , _oWINDOW.stage.stageHeight);						endFill();					}									//					_oSCROLL_PANE.setSize( _oWINDOW.stage.stageWidth , _oWINDOW.stage.stageHeight );											}						/**			* 			*			* @param 			* @return			*/			final protected function _onClosed( e : Event ) : void {				cancel();			}						/**			* 			*			* @param 			* @return			*/
			final protected function _update() : void {
				_oLOADER = new Loader( );
				_oLOADER.contentLoaderInfo.addEventListener(Event.COMPLETE, _onMedia, false, 10, true);
				_oLOADER.load(new URLRequest(_oASSET.datas.sPath ) );				
				//_spCONTAINER.addChild( new Bitmap( _oASSET.datas.bMedia ) )			}						/**			* 			*			* @param 			* @return			*/
			final protected function _onMedia(e : Event) : void {				_oLOADER.contentLoaderInfo.removeEventListener(Event.COMPLETE, _onMedia, false);
				DisplayFuncs.purge(_spCONTAINER );
				_spCONTAINER.addChild(_oLOADER);
				_oSCROLL_PANE.update( );								if( _oLOADER.height < 700 ) { 					_oWINDOW.stage.stageHeight = _oLOADER.height ;
					_oSCROLL_PANE.verticalScrollPolicy = ScrollPolicy.OFF;
				} else {
					_oSCROLL_PANE.verticalScrollPolicy = ScrollPolicy.AUTO;					_oWINDOW.stage.stageHeight = 700;				}									if( _oLOADER.width < _oWINDOW.stage.stageWidth )					_oWINDOW.stage.stageHeight = _oLOADER.width ;			}					// -------o misc			public static function trc(...args : *) : void {				Logger.log(CommandAssetPreview, args);			}						/**			* Return the singleton instance of the class			* @public			* @return instance of the class (CommandAssetPreview)			*/			static public function getInstance() : CommandAssetPreview {								if( !__instance )					__instance = new CommandAssetPreview( new SingletonEnforcer() );												return __instance;			}						protected static var __instance			: CommandAssetPreview = null;	}}internal class SingletonEnforcer{	}