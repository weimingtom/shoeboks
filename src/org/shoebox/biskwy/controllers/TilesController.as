/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.biskwy.controllers {	import fl.controls.ComboBox;	import org.shoebox.biskwy.core.Facade;	import org.shoebox.biskwy.core.variables.TileSelection;	import org.shoebox.biskwy.core.variables.TilesCache;	import org.shoebox.biskwy.data.TileDesc;	import org.shoebox.biskwy.events.TileEvent;	import org.shoebox.biskwy.items.TileItem;	import org.shoebox.biskwy.models.TilesModel;	import org.shoebox.core.BoxObject;	import org.shoebox.patterns.mvc.abstracts.AController;	import org.shoebox.patterns.mvc.interfaces.IController;	import org.shoebox.utils.logger.Logger;	import flash.display.NativeMenu;	import flash.events.ContextMenuEvent;	import flash.events.Event;	import flash.events.FileListEvent;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.filesystem.File;	import flash.net.FileFilter;	import flash.ui.Keyboard;	/**	 * org.shoebox.biskwy.controllers.TilesController	* @author shoebox	*/	public class TilesController extends AController implements IController{				protected var _bSHIFT		:Boolean = false;		protected var _oFILE		:File;		protected var _oMENU		:NativeMenu;		protected var _oSELECTION	:TileItem;		protected var _vSELECTED	:Vector.<TileItem> = new Vector.<TileItem>();		protected var _vTILES		:Vector.<Object> = new Vector.<Object>();				// -------o constructor					public function TilesController() : void {			}		// -------o public						/**			* When the controller receive an event			* 			* @public			* @param	e : event (Event) 			* @return	void			*/			final override public function onEvent( e : Event ) : void {								switch( e.type ){										case Event.CHANGE:						(model as TilesModel).filter( (e.target as ComboBox).selectedItem.label );							break;										case MouseEvent.CLICK:						_click(e.target as TileItem );						break;										case MouseEvent.MOUSE_OVER:						(e.target as TileItem).over();						break;											case MouseEvent.MOUSE_OUT:						(e.target as TileItem).out();						break;										case MouseEvent.DOUBLE_CLICK:						var oEVENT : TileEvent = new TileEvent( TileEvent.EDIT );						BoxObject.accessorInit( oEVENT , { tileID : ((e.target as TileItem).datas.id) });						Facade.getInstance().dispatchEvent(oEVENT);						break;											case KeyboardEvent.KEY_DOWN:					case KeyboardEvent.KEY_UP:						if(( e as KeyboardEvent ).keyCode == Keyboard.SHIFT){							if( e.type == KeyboardEvent.KEY_DOWN )								_bSHIFT = true;							else								_bSHIFT = false;						}						break;								}							}									/**			* When the controller is initialized			* 			* @public			* @return	void			*/			final override public function initialize() : void {				//Menu.getInstance().addEventListener(Event.SELECT , _onSelect , false , 10 , true);				}						/**			* When the controller is canceled			* 			* @public			* @param	e : optional cancel event (Event)	 			* @return	void			*/			final override public function cancel( e : Event = null ) : void {						}						/**			* When a <code>TileItem</code> is clicked			* 			* @public			* @param	reference tile ( TileItem ) 			* @return	void			*/			public function click( o : TileItem ) : void {				_click( o );			}					// -------o protected					/**			* When an <code>TileItem</code> is clicked 			*			* @param	o : clicked tileitem (TileItem)	 			* @return	void			*/			protected function _click( o : TileItem) : void {								//					if(_bSHIFT){						_addToMultiSelection( o );						return;					}								//					if(_vSELECTED.length > 0){						var oFUNC : Function = function( t : TileItem , u : uint , v : Vector.<TileItem> ) : void {							t.unfreeze();						};						_vSELECTED.forEach( oFUNC );					}								//					_vSELECTED = new Vector.<TileItem>();					_vTILES = new Vector.<Object>();								if(_oSELECTION)					_oSELECTION.unfreeze();								TileSelection = Vector.<TileDesc>([TilesCache.getValue(o.datas.id) as TileDesc]);								_oSELECTION = o;				_oSELECTION.freeze();				(model as TilesModel).selectedID = o.id;							}						/**			* 			*			* @param 			* @return			*/			protected function _addToMultiSelection( o : TileItem ) : void {								o.freeze();								if(_vSELECTED.length == 0){					if( _oSELECTION ){						_vSELECTED.push( _oSELECTION );						_vTILES.push( _oSELECTION.datas );					}				}								_vTILES.push( o.datas );				_vSELECTED.push ( o );				TileSelection.push( o.datas );			}									/**			* Launching the file browsing			*			* @return	void			*/			protected function _import() : void {				_oFILE = new File();				_oFILE.addEventListener(FileListEvent.SELECT_MULTIPLE , _onBrowsed , false , 10 , true);				_oFILE.browseForOpenMultiple('From ... ' , [new FileFilter('Media Files','*.swf;*.png')]);			}						/**			* When the browsing end			*			* @param 	e : list of files to be imported ( FileListEvent )			* @return	void			*/			protected function _onBrowsed( e: FileListEvent ) : void {				var aFILES:Array = e.files;				var l : int = aFILES.length - 1;				var i : int = -1;				while( i++ < l ){					(model as TilesModel).importFile(aFILES[i]);				}				(model as TilesModel).launchImport();							}						/**			* On selected NativeMenuItem in to the context menu of the item			*			* @param 	e : Selection event (Event)			* @return	void			*/			protected function _menu( e : ContextMenuEvent ) : void {				trc('onMenu ::: '+e.target);				}				// -------o misc			public static function trc(arguments : *) : void {				Logger.log(TilesController, arguments);			}	}}