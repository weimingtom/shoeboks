/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.biskwy.models {	import fl.data.DataProvider;	import org.shoebox.biskwy.core.Config;	import org.shoebox.biskwy.core.TwoD;	import org.shoebox.biskwy.services.groups.SGetGroups;	import org.shoebox.patterns.mvc.abstracts.AModel;	import org.shoebox.patterns.mvc.interfaces.IModel;	import org.shoebox.patterns.service.ServiceEvent;	import org.shoebox.patterns.service.ServiceFactory;	import org.shoebox.utils.logger.Logger;	import flash.events.Event;	import flash.utils.ByteArray;	/**	 * org.shoebox.biskwy.models.MGroups	* @author shoebox	*/	public class MGroups extends AModel implements IModel {				protected var _aCONTENT		:Array;		protected var _oSERVICE		:SGetGroups;		protected var _uLEN		:uint;		protected var _uCURRENT		:uint = 0;				// -------o constructor					/**			* Constructor of the MGroups class			*			* @public			* @return	void			*/			public function MGroups() : void {				trc('constructor');				_oSERVICE = ServiceFactory.getService( SGetGroups ) as SGetGroups ;			}		// -------o public						/**			* When the model is initialized			* 			* @public			* @param	e : optional event (Event) 			* @return	void			*/			final override public function initialize( e : Event = null ) : void {				trc('initialize ::: '+e);					_initTable();			}									/**			* When the model is canceled			* 			* @public			* @param	e : optional event (Event) 			* @return	void			*/			final override public function cancel(e:Event = null) : void {				_oSERVICE = null;				}						/**			* Initializating the Groups table			* @see <code>Schemas</code> for the Table SQL Schema			* 			* @return void			*/			protected function _initTable() : void {								_oSERVICE.addEventListener( ServiceEvent.ON_DATAS , _onDatas , false , 10 , true );				_oSERVICE.call();					}						/**			* get dataProvider function			* @public			* @param 			* @return			*/			public function get dataProvider() : DataProvider {								var 	oDP : DataProvider = new DataProvider();				var	i : int;				for( i ; i < _uLEN ; i++ ){					oDP.addItem( {label:_aCONTENT[i].name , value : _aCONTENT[i].id });				}												return oDP;							}						/**			* get datas function			* @public			* @param 			* @return			*/			public function get datas() : Object {				return _aCONTENT[_uCURRENT];			}						/**			* get currentID function			* @public			* @param 			* @return			*/			public function get currentID() : uint {				return _aCONTENT[_uCURRENT].id; 			}						/**			* set currentID function			* @public			* @param 			* @return			*/			public function set currentID( u : uint ) : void {				_uCURRENT = u;			}						/**			* get content function			* @public			* @param 			* @return			*/			public function get content() : Object {				var 	ns : Namespace = Config.GRIDTYPE;				return ns :: _parse();			}		// -------o protected						/**			* When the service response is received			*			* @param 	e : service response (ServiceEvent)					* @return	void			*/			protected function _onDatas( e : ServiceEvent ) : void {				if(!e.datas){					_uLEN = 0;					return;				}				_aCONTENT = e.datas;				_uLEN = _aCONTENT.length;				trc('length ::: '+_uLEN);				if(_oSERVICE)					_oSERVICE.removeEventListener( ServiceEvent.ON_DATAS , _onDatas , false );				update('osef');			}						/**			* Parsing of the group content			*			* @return void			*/			TwoD function _parse() : Object {				trc('parse');								//					var 	oB : ByteArray = new ByteArray();						oB.writeBytes( datas.data as ByteArray , 0); 						oB.uncompress();										//					oB.position = 18;					return oB.readObject();							}		// -------o misc			public static function trc(...args : *) : void {				Logger.log(MGroups, args);			}	}}