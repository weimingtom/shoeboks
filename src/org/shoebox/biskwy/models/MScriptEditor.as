/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.biskwy.models {	import fl.data.DataProvider;	import org.shoebox.biskwy.commands.scripts.AScript;	import org.shoebox.biskwy.commands.scripts.CommandScriptGoto;	import org.shoebox.biskwy.data.TriggerScript;	import org.shoebox.biskwy.events.TriggerEvent;	import org.shoebox.biskwy.items.TriggerItem;	import org.shoebox.biskwy.views.scripts.VScriptEditor;	import org.shoebox.patterns.factory.Factory;	import org.shoebox.patterns.mvc.abstracts.AModel;	import org.shoebox.patterns.mvc.interfaces.IModel;	import org.shoebox.utils.Relegate;	import org.shoebox.utils.logger.Logger;	import flash.events.Event;	import flash.events.TimerEvent;	/**	 * org.shoebox.biskwy.models.MScriptEditor	* @author shoebox	*/	public class MScriptEditor extends AModel implements IModel {				public static var INIT			:String = 'ScriptEditor_INIT';		public static var EDIT			:String = 'ScriptEditor_SCRIPTEDIT';		public static var CREATE		:String = 'ScriptEditor_SCRIPTCREATE';				protected var _dpSCRIPTS		:DataProvider;		protected var _oDP			:DataProvider = null;					protected var _oTRIGGER			:TriggerItem;		protected var _oCURRENT			:TriggerScript;		protected var _uCURRENT			:uint = 0;		protected var _vSCRIPTS			:Vector.<Class>;		protected var _vTRIGSCRIPTS		:Vector.<TriggerScript>;		protected var _oXMLTRIGGER		:XML;				// -------o constructor					/**			* Constructor of the MScriptEditor class			*			* @public			* @return	void			*/			public function MScriptEditor() : void {								//					_vSCRIPTS = Vector.<Class>([ CommandScriptGoto ]);								//					_oXMLTRIGGER = 	<root>						      		<entry label = "TRIGGER OPTIONS" 	prop='infottl' 	type = "title" />						      		<entry label = 'Trigger id' 		prop='triggerid' 	type = "string" value = 'Trigger01'/>						      		<entry label = 'Shape' 			prop='shape' 	type = "string" value = "Circle" />						      		<entry label = 'Radius' 		prop='radius' 	type = "number" value = "50" min='0' max='10000'/>					      		</root>;			      							      //			      	_dpSCRIPTS = new DataProvider();			      	_dpSCRIPTS.addItem({ label : 'Goto' , value : CommandScriptGoto });			}		// -------o public						/**			* Model initialization			* 			* @public			* @param	e : optional initizialition event (Event) 			* @return	void			*/			final override public function initialize( e : Event = null ) : void {								if(!( e is TriggerEvent ))					Logger.fatal( this , 'The event is not a trigger event');								//					_oTRIGGER = (e as TriggerEvent).from;								//					_oXMLTRIGGER..entry.(@prop=='shape')[0].@value 		= _oTRIGGER.shape;					_oXMLTRIGGER..entry.(@prop=='radius')[0].@value 	= _oTRIGGER.radius;					_oXMLTRIGGER..entry.(@prop=='triggerid')[0].@value 	= _oTRIGGER.triggerID;								//					_vTRIGSCRIPTS = _oTRIGGER.scripts;								Relegate.afterDelay( _onScripts , .5  );			}									/**			* Model cancel			* 			* @public			* @param	e : optional cancel event (Event) 			* @return	void			*/			final override public function cancel(e:Event = null) : void {								}						/**			* Getter of the trigger desc <code>XML</code> for filling the propspanel			* 			* @public			* @return trigger desc (XML)			*/			public function get triggerXML() : XML {				return _oXMLTRIGGER;			}							/**			* Return the dataProvider of the scripts <code>ComboBox</code>			* 			* @public			* @return	ComboBox's dataprovider (DataProvider)			*/			public function get scriptsDP() : DataProvider {				return _dpSCRIPTS;			}						/**			* Adding a new blank script (called from the controller class <code>CScriptEditor</code>)			* 			* @public			* @return	void			*/			public function addScript() : void {				trc('addScript');				var oSCRIPT : TriggerScript = Factory.build( TriggerScript , { ref : new (_vSCRIPTS[(view as VScriptEditor).selectedScriptID])() } );				update( CREATE 	, oSCRIPT );				update( EDIT 	, oSCRIPT );				_vTRIGSCRIPTS.push( oSCRIPT );				_oCURRENT = oSCRIPT;			}						/**			* Edit an existing <code>TriggerScript</code> (called from the controller class <code>CScriptEditor</code>)			* 			* @public			* @param 	o : TriggerScript to be edited (TriggerScript)			* @return			*/			public function editScript( o : TriggerScript ) : void {				trc('editScript ::: '+o);				_oCURRENT = o;				update( EDIT , o );			}					// -------o protected						/**			* When the script are loaded			*			* @param	e : optional timerevent to give time to the view to be constructed (TimerEvent) 			* @return	void			*/			protected function _onScripts( e : TimerEvent ) : void {				trc('_onScripts');				update(INIT);								//We build each of the already existing scripts					var oSCRIPT : TriggerScript;					for each( oSCRIPT in _vTRIGSCRIPTS){											}			}					// -------o misc			public static function trc(...args : *) : void {				Logger.log(MScriptEditor, args);			}	}}