/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.biskwy.models {
	import org.shoebox.biskwy.core.variables.LastFile;
	import org.shoebox.biskwy.views.VAssetManager;
	import org.shoebox.biskwy.data.MediaDesc;
	import flash.display.BitmapData;
	import flash.data.SQLResult;
	import flash.events.SQLEvent;
	import org.shoebox.biskwy.core.Database;
	import org.shoebox.biskwy.services.SImportMedia;
	import org.shoebox.patterns.mvc.abstracts.AModel;	import org.shoebox.patterns.mvc.interfaces.IModel;	import org.shoebox.patterns.service.ServiceBatch;	import org.shoebox.utils.logger.Logger;	import flash.events.Event;	import flash.events.FileListEvent;	import flash.filesystem.File;	/**	 * MAssetManager model class 	* 	* org.shoebox.biskwy.models.MAssetManager	* @author shoebox	*/	public class MAssetManager extends AModel implements IModel {				public static const ON_DATAS		: String = 'MAssetManager-ON_DATAS';				protected var _oBASE				: Database;		protected var _oFILE				: File;		protected var _oBATCH				: ServiceBatch;		protected var _oDATAS				: SQLResult;		protected var _vRESULTS			: Vector.<MediaDesc>;				// -------o constructor					/**			* Constructor of the model class			*			* @public			* @return	void			*/			public function MAssetManager() : void {			}		// -------o public						/**			* Model initialization 			* 			* @public			* @param	e : optional initialization event (Event) 			* @return	void			*/			final override public function initialize( e : Event = null ) : void {				_oBASE = Database.getInstance();				}									/**			* When the model and the triad is canceled			* 			* @public			* @param	e : optional cancel event (Event) 			* @return	void			*/			final override public function cancel(e:Event = null) : void {									}						/**			* import function			* @public			* @param 			* @return			*/			final public function importMedia() : void {
				trc('importMedia');
				_oFILE = LastFile;				_oFILE.addEventListener( FileListEvent.SELECT_MULTIPLE , _onBrowsed , false , 10 , true );				_oFILE.browseForOpenMultiple('open medias');			}						/**			* list function			* @public			* @param 			* @return			*/			final public function list( sCAT : String = '' ) : void {								if( sCAT !== '' )					_oBASE.text = 'SELECT * FROM TB_Assets WHERE cat="'+sCAT+'"';				else					_oBASE.text = 'SELECT * FROM TB_Assets';					_oBASE.addEventListener( SQLEvent.RESULT , _onList , false , 10 , true);					_oBASE.execute();							}						/**			* get datasLength function			* @public			* @param 			* @return			*/			final public function get datasLength() : uint {								if( _oDATAS )					return _oDATAS.data.length;				else					return 0;			}						/**			* get dataProvider function			* @public			* @param 			* @return			*/			final public function get dataProvider() : Vector.<MediaDesc> {				return _vRESULTS;			}						/**			* delAssets function			* @public			* @param 			* @return			*/			final public function delAssets( v : Vector.<uint> ) : void {								var s : String = '';				var u : uint;				for each( u in v ) 					if( s !== '')						s = s + ','+ u;					else						s = u+'';									_oBASE.text = 'DELETE FROM TB_Assets WHERE id IN ( '+s+')';				_oBASE.addEventListener( SQLEvent.RESULT , _onChanged , false , 10 , true);				_oBASE.execute();															}						/**			* convertAs function			* @public			* @param 			* @return			*/			final public function convertAs( v : Vector.<uint> , sType : String ) : void {				trc('convertAs ::: '+v+' /// '+sType);								var s : String = '';				var u : uint;				for each( u in v ) 					if( s !== '')						s = s + ','+ u;					else						s = u+'';								_oBASE.text = 'UPDATE TB_Assets SET type="'+sType+'" WHERE id IN ('+s+')';				trace('_oBASE.text ::: '+_oBASE.text);				_oBASE.addEventListener( SQLEvent.RESULT , _onChanged , false , 10 , true);				_oBASE.execute();							}
					// -------o protected						/**			* SQL response listener			*			* @param 	e : SQL response ( SQLEvent )			* @return	void			*/			final protected function _onList( e : SQLEvent ) : void {				
				_oBASE.removeEventListener(SQLEvent.RESULT, _onList, false);
				_oDATAS = _oBASE.getResult();
								//					var vOLD : Vector.<MediaDesc>;					if( _vRESULTS )						vOLD = _vRESULTS.slice( );													//					_vRESULTS = new Vector.<MediaDesc>();										var o : Object;					var b : BitmapData;					var v : Vector.<uint>;					var d : MediaDesc;					for each( o in _oDATAS.data	) {												v = o.preview as Vector.<uint>;						b = new BitmapData( v.shift() , v.shift() , true );						b.setVector( b.rect , v );												d = new MediaDesc( o.id , o.label , o.type , b , o.filePath );												_vRESULTS.push( d );					}									// 					for each( d in _vRESULTS )						(view as VAssetManager).addItem( d );								//										if( vOLD ){						var t : MediaDesc;						var bTMP : Boolean;						for each( d in vOLD ){														bTMP = false;							for each( t in _vRESULTS ) {
																if( t.iID == d.iID ){									bTMP = true;										break;								}															}														if( !bTMP ){								
								(view as VAssetManager).removeItem(d);
								var 	oFILE : File = File.documentsDirectory;
									oFILE = oFILE.resolvePath( d.sPath );																	if( oFILE.exists )									oFILE.deleteFile();																							}													}					}									update( ON_DATAS );			}						/**			* 			*			* @param 			* @return			*/			protected function _onBrowsed( e : FileListEvent ) : void {												_oBATCH = new ServiceBatch();				_oBATCH.addEventListener( Event.COMPLETE , _onComplete , false , 10 , true );								//						var aFILES : Array = e.files as Array;					var l : uint = aFILES.length ;					var i : int = 0;										LastFile = (aFILES[0] as File).parent;										while( i < l ){						trc('addFile ::: '+aFILES[i]);						_oBATCH.addService( SImportMedia , { file : aFILES[i] } );						i++;					}										_oBATCH.call();								_oFILE = _oFILE.resolvePath( _oFILE.nativePath );			}						/**			* 			*			* @param 			* @return			*/			protected function _onComplete ( e : Event ) : void {				list( );			}						/**			* 			*			* @param 			* @return			*/			protected function _onChanged(event : SQLEvent) : void {				_oBASE.removeEventListener( SQLEvent.RESULT , _onChanged , false );				list( );			}					// -------o misc			public static function trc(...args : *) : void {				Logger.log(MAssetManager, args);
		}

	}}