/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.biskwy.models {	import org.shoebox.biskwy.data.LinkItem;	import org.shoebox.biskwy.items.scriptsEditor.Anchor;	import org.shoebox.biskwy.views.VNevermind;	import org.shoebox.patterns.mvc.abstracts.AModel;	import org.shoebox.patterns.mvc.interfaces.IModel;	import org.shoebox.patterns.service.HTTP_Service;	import org.shoebox.patterns.service.ServiceEvent;	import org.shoebox.utils.logger.Logger;	import flash.events.Event;	import flash.net.URLRequest;	/**	 * org.shoebox.biskwy.models.MNevermind	* @author shoebox	*/	public class MNevermind extends AModel implements IModel {				protected var _vLINKS			:Vector.<LinkItem> = new Vector.<LinkItem>();		protected var _oSERVICE			:HTTP_Service;		protected var _oDATAS			:XML;				// -------o constructor					/**			* Constructor of the MNevermind class			*			* @public			* @return	void			*/			public function MNevermind() : void {			}		// -------o public						/**			* initialize function			* @public			* @param 			* @return			*/			final override public function initialize( e : Event = null ) : void {				trc('initialize');				_loadXML();			}									/**			* cancel function			* @public			* @param 			* @return			*/			final override public function cancel(e:Event = null) : void {									}						/**			* get list function			* @public			* @param 			* @return			*/			final public function get list() : XMLList {				return _oDATAS..entry;			}						/**			* getDesc function			* @public			* @param 			* @return			*/			final public function getDesc( s : String ) : XML {				return _oDATAS..desc.(@id==s)[0];			}						/**			* registerLink function			* @public			* @param 			* @return			*/			final public function registerLink( o1 : Anchor , o2 : Anchor ) : void {				trc('registerLink');				_vLINKS.push( new LinkItem( o1 , o2 ) );				update( VNevermind.REDRAW );			}						/**			* get links function			* @public			* @param 			* @return			*/			final public function get links() : Vector.<LinkItem> {				return _vLINKS;			}					// -------o protected						/**			* 			*			* @param 			* @return			*/			final protected function _loadXML() : void {				_oSERVICE = new HTTP_Service();				_oSERVICE.dataFormat = HTTP_Service.XMLDATAS;				_oSERVICE.addEventListener( ServiceEvent.ON_DATAS , _onXML , false , 10 , true );				_oSERVICE.request = new URLRequest('config/nevermind.xml');				_oSERVICE.call();			}			/**			* 			*			* @param 			* @return			*/			final protected function _onXML( e : ServiceEvent ) : void {				_oDATAS = e.datas as XML;				_oSERVICE.removeEventListener( ServiceEvent.ON_DATAS , _onXML , false );				update('osef');			}					// -------o misc			public static function trc(...args : *) : void {				Logger.log(MNevermind, args);			}	}}