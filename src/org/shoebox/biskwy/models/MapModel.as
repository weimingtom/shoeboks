/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.biskwy.models {	import org.shoebox.biskwy.items.PolyItem;
	import org.shoebox.biskwy.core.variables.PolyContainer;
	import flash.utils.describeType;
	import org.shoebox.biskwy.commands.CommandProgress;	import org.shoebox.biskwy.commands.map.CMDMapFill;	import org.shoebox.biskwy.core.Config;	import org.shoebox.biskwy.core.IsoGrid;	import org.shoebox.biskwy.core.TwoD;	import org.shoebox.biskwy.core.variables.CurrentMapLayers;	import org.shoebox.biskwy.core.variables.GizmoContainer;	import org.shoebox.biskwy.data.LayerItem;	import org.shoebox.biskwy.data.MapFileChunks;	import org.shoebox.biskwy.items.GridTile;	import org.shoebox.biskwy.items.SoundItem;	import org.shoebox.biskwy.items.TriggerItem;	import org.shoebox.biskwy.services.SGetMap;	import org.shoebox.biskwy.services.SMapUpdate;	import org.shoebox.biskwy.utils.Transformer;	import org.shoebox.biskwy.views.maps.VMap;	import org.shoebox.patterns.commands.CommandBatch;	import org.shoebox.patterns.commands.events.CommandBatchProgressEvent;	import org.shoebox.patterns.commands.events.CommandEvents;	import org.shoebox.patterns.factory.Factory;	import org.shoebox.patterns.mvc.abstracts.AModel;	import org.shoebox.patterns.mvc.interfaces.IModel;	import org.shoebox.patterns.service.ServiceEvent;	import org.shoebox.patterns.service.ServiceFactory;	import org.shoebox.utils.logger.Logger;	import flash.display.Loader;	import flash.events.Event;	import flash.filesystem.File;	import flash.filesystem.FileStream;	import flash.geom.Vector3D;	import flash.utils.ByteArray;	/**	 * <p>Model of the map application	* inherit of <b>AModel</b>	* implements <b>IModel</b></p>	* 	* @see AModel	* @see IModel	* org.shoebox.biskwy.models.MapModel	* @author shoebox	*/	public class MapModel extends AModel implements IModel {				public const GRID_TILE		: uint = 0x7000;				protected var _oCONTENT		:ByteArray;		protected var _oBATCH		:CommandBatch;		protected var _oFILE		:File;		protected var _oSTREAM		:FileStream;		protected var _oSERVICE		:SGetMap;		protected var _uCURRENTMAPID	:uint;		protected var _vCONTENT		:Vector.<GridTile> = new Vector.<GridTile>();				// -------o constructor					public function MapModel() : void {			}		// -------o public						/**			* initialize function			* @public			* @param 			* @return			*/			final override public function initialize( e : Event = null ) : void {				_oSERVICE = ServiceFactory.getService(SGetMap) as SGetMap;				_oSERVICE.addEventListener( ServiceEvent.ON_DATAS , _onOpening , false , 100 , false );			}									/**			* cancel function			* @public			* @param 			* @return			*/			final override public function cancel( e : Event = null ) : void {				_oSERVICE.removeEventListener( ServiceEvent.ON_DATAS , _onOpening , false);			}						/**			* register function			* @public			* @param 			* @return			*/			public function register( t : GridTile ) : void {				_vCONTENT.push(t);			}						/**			* clear function			* @public			* @param 			* @return			*/			public function clear() : void {							var oFUNC : Function = function( o : GridTile , index : int , v : Vector.<GridTile> ):void{					o.clear();					};								_vCONTENT.forEach( oFUNC );			}						/**			* save function			* @public			* @param 			* @return			*/			public function save() : void {				_save();			}					// -------o protected						/**			* 			*			* @param 			* @return			*/			protected function _getContent() : ByteArray {				_oCONTENT = new ByteArray();								//Maps Infos					_oCONTENT.writeShort(MapFileChunks.INFOS_BWM);					_oCONTENT.writeShort((Config.GRIDTYPE==IsoGrid) ? 0 : 1);					_oCONTENT.writeInt(Config.GRID_WIDTH);					_oCONTENT.writeInt(Config.GRID_HEIGHT);								//Map content					var oFUNC : Function = function( o : GridTile , index : int , v : Vector.<GridTile> ):void{						_oCONTENT.writeShort(MapFileChunks.GRID_ENTRY);						_oCONTENT.writeInt(o.position.x);						_oCONTENT.writeInt(o.position.y);						_oCONTENT.writeObject(o.container.content);					};					_vCONTENT.forEach( oFUNC );								//Behaviors					var n : uint = GizmoContainer.numChildren;					var i : uint;					var o : TriggerItem;					for( i ; i < n ; i++ ){												if( !(GizmoContainer.getChildAt(i) is TriggerItem))							continue;												o = GizmoContainer.getChildAt(i) as TriggerItem;												_oCONTENT.writeShort(MapFileChunks.GRID_BEHAVIOR);						_oCONTENT.writeInt( o.position.x );						_oCONTENT.writeInt( o.position.y );						_oCONTENT.writeInt( o.position.z );						_oCONTENT.writeInt( o.radius );						_oCONTENT.writeUTF( o.triggerID );					}								// Sounds					i = 0;					var s : SoundItem;					for( i ; i < n ; i++ ){												if( !(GizmoContainer.getChildAt(i) is SoundItem ))							continue;												s = GizmoContainer.getChildAt(i) as SoundItem;												_oCONTENT.writeShort(MapFileChunks.GRID_SOUND);						_oCONTENT.writeInt( s.position.x );						_oCONTENT.writeInt( s.position.y );						_oCONTENT.writeInt( s.position.z );						_oCONTENT.writeInt( s.RADIUS );						_oCONTENT.writeUTF( s.name );					}									// Layers					i = 0;					n = CurrentMapLayers.length;					var b : ByteArray;					for( i ; i < n ; i++ ){												_oCONTENT.writeShort( MapFileChunks.MAP_LAYER );						_oCONTENT.writeBoolean( CurrentMapLayers[i].isGameLayer );						_oCONTENT.writeUTF(CurrentMapLayers[i].layerName );						_oCONTENT.writeInt( CurrentMapLayers[i].decalX );						_oCONTENT.writeInt( CurrentMapLayers[i].decalY );						_oCONTENT.writeBoolean( CurrentMapLayers[i].bParallax );						_oCONTENT.writeBoolean( CurrentMapLayers[i].bTileable );						_oCONTENT.writeFloat( CurrentMapLayers[i].nSpeed );						trace('addLayer ::: '+CurrentMapLayers[i].layerName+' // '+CurrentMapLayers[i].nSpeed);												if( !CurrentMapLayers[i].isGameLayer ) 							_oCONTENT.writeObject(CurrentMapLayers[i].media);											}								// Polys					i = 0;					n = PolyContainer.numChildren;					var p : PolyItem;										for( i ; i < n ; i++ ){							p = PolyContainer.getChildAt(i) as PolyItem; 												_oCONTENT.writeShort( MapFileChunks.POLY );						_oCONTENT.writeObject( p.content );					}									//					_oCONTENT.compress();					return _oCONTENT;			}						/**			* 			*			* @param 			* @return			*/			protected function _onOpening( e : ServiceEvent ) : void {				trc('_onOpening > '+e.datas);				(view as VMap).reset();				if(!e.datas)					return;								CurrentMapLayers = new Vector.<LayerItem>();								_vCONTENT = new Vector.<GridTile>();				_oCONTENT = new ByteArray();				_oCONTENT.writeBytes( e.datas[0].data , 0 );				_oCONTENT.uncompress();				_uCURRENTMAPID = (e.target as SGetMap).mapID;								//					Config.GRID_WIDTH = e.datas[0].width;					Config.GRID_HEIGHT = e.datas[0].height;					update('osef');								//					_oBATCH = new CommandBatch( );					var d  : Vector.<int>;					var uX : uint;					var uY : uint;					var i : uint;					var l : uint;					var oTILE : GridTile;					var id : uint;										while( _oCONTENT.bytesAvailable > 0 ){												id = _oCONTENT.readUnsignedShort();												switch(id){														case MapFileChunks.INFOS_BWM:								Config.GRIDTYPE = (_oCONTENT.readShort() == 0) ? IsoGrid : TwoD;								Config.GRID_WIDTH = _oCONTENT.readInt();								Config.GRID_HEIGHT = _oCONTENT.readInt();								break;															case MapFileChunks.GRID_ENTRY:								uX = _oCONTENT.readInt();								uY = _oCONTENT.readInt();								oTILE = (view as VMap).getTileAt(uX , uY);								d = _oCONTENT.readObject() as Vector.<int>;								if( d ){																		i = 0;									l = d.length;									while( i < l){										_oBATCH.addCommand( CMDMapFill , { 															tile : oTILE,															id : d.shift(),															depth : d.shift()															});																			i+=2;									}									}								break;														case MapFileChunks.GRID_BEHAVIOR:								_addTriggerAt( 										new Vector3D( _oCONTENT.readInt(),_oCONTENT.readInt(),_oCONTENT.readInt()),										_oCONTENT.readInt(),										_oCONTENT.readUTF()									);															break;														case MapFileChunks.GRID_SOUND:								_addSoundAt( 										new Vector3D( _oCONTENT.readInt(),_oCONTENT.readInt(),_oCONTENT.readInt()),										_oCONTENT.readInt(),										_oCONTENT.readUTF()									);								break;														case MapFileChunks.MAP_LAYER:								var bBOL 	: Boolean = _oCONTENT.readBoolean(); 																_addLayer(										bBOL, 										_oCONTENT.readUTF(),										_oCONTENT.readInt(),										_oCONTENT.readInt(),										_oCONTENT.readBoolean(),										_oCONTENT.readBoolean(),										_oCONTENT.readFloat(),										(bBOL) ? null : _oCONTENT.readObject() 								);								break;															case MapFileChunks.POLY:								var 	o : PolyItem = new PolyItem();									o.content = _oCONTENT.readObject() as Vector.<int>;																PolyContainer.addChild( o ); 								break;												}																	}					_oBATCH.addEventListener( CommandEvents.COMPLETE , _onComplete , false , 10 , true);					_oBATCH.addEventListener( CommandBatchProgressEvent.PROGRESS , _onProgress , false , 10 , true);					_oBATCH.execute();			}						/**			* Add a map layer			*			* @param 	sNAME : layer name 		(String) 			* @param 	bGAME : Is it a game layer ? 	(Boolean) 			* @return	void			*/			final protected function _addLayer( 									bGAME : Boolean , 									sNAME : String , 									decalX : int , decalY : int ,									bParallax : Boolean,									bTileable : Boolean,									iSpeed : Number, 									media : ByteArray ) : void {								var 	oLOADER : Loader = new Loader(  );				if( !bGAME )					oLOADER.loadBytes( media );													CurrentMapLayers.push( 								Factory.build( LayerItem , 	{														bTileable : bTileable,														bParallax : bParallax,														isGameLayer : bGAME,														media : media ,														nSpeed : iSpeed ,														decalX : decalX,														decalY : decalY,														layerName : sNAME	,														loaderRef : oLOADER													} 								));									}						/**			* Adding a sound object in the current map			*			* @param 			* @return			*/			final protected function _addSoundAt( vPOS : Vector3D , nRADIUS : uint , sNAME : String) : void {							var	vPOSTOD : Vector3D;					var	vPOSWLD : Vector3D;														//					if(Config.GRIDTYPE == TwoD) {						vPOSWLD = Transformer.screenToWorld(vPOS.clone());						vPOSWLD.x += Config.TILESIZE / 2;						vPOSWLD.y += Config.TILESIZE / 2;					}else if( Config.GRIDTYPE == IsoGrid ) {																vPOSTOD = new Vector3D(vPOS.x, vPOS.y);						vPOSWLD = Transformer.screenToWorld(vPOSTOD);						vPOSWLD.scaleBy(Config.TILESIZE / 2);																vPOSWLD.x += Config.TILESIZE / 2 ;						vPOSWLD.x += (Config.GRID_WIDTH / 2) * Config.TILESIZE;																vPOSWLD.y = vPOSWLD.y + Config.TILESIZE / 4;					}														//							var 	oITEM : SoundItem = Factory.build(SoundItem, { 																	x : vPOSWLD.x, 																y : vPOSWLD.y, 																position : vPOS.clone(),																RADIUS : nRADIUS , 																name : sNAME															}) as SoundItem;							oITEM.redraw();									GizmoContainer.addChild(oITEM);			}			/**			* 			*			* @param 			* @return			*/			protected function _addTriggerAt( vPOS : Vector3D , nRADIUS : uint , sTRIGGERID : String ) : void {											var	vPOSTOD : Vector3D;					var	vPOSWLD : Vector3D;														//					if(Config.GRIDTYPE == TwoD) {						vPOSWLD = Transformer.screenToWorld(vPOS.clone());						vPOSWLD.x += Config.TILESIZE / 2;						vPOSWLD.y += Config.TILESIZE / 2;					}else if( Config.GRIDTYPE == IsoGrid ) {																vPOSTOD = new Vector3D(vPOS.x, vPOS.y);						vPOSWLD = Transformer.screenToWorld(vPOSTOD);						vPOSWLD.scaleBy(Config.TILESIZE / 2);																vPOSWLD.x += Config.TILESIZE / 2 ;						vPOSWLD.x += (Config.GRID_WIDTH / 2) * Config.TILESIZE;																vPOSWLD.y = vPOSWLD.y + Config.TILESIZE / 4;					}														//							var 	oITEM : TriggerItem = Factory.build(TriggerItem, { name : 'Trigger' , x : vPOSWLD.x, y : vPOSWLD.y, position : vPOS.clone()}) as TriggerItem;						oITEM.radius = nRADIUS;						oITEM.triggerID = sTRIGGERID;					GizmoContainer.addChild(oITEM);			}			/**			* 			*			* @param 			* @return			*/			protected function _onComplete ( e : CommandEvents ) : void {				trc('onComplete');								if( CurrentMapLayers.length == 0 )					CurrentMapLayers = Vector.<LayerItem>([Factory.build( LayerItem, { isGameLayer : true , layerName :'Game layer '})]);									_oBATCH.removeEventListener( CommandEvents.COMPLETE , _onComplete , false );				_oBATCH = null;				CommandProgress.getInstance().cancel();			}						/**			* 			*			* @param 			* @return			*/			protected function _save() : void {				trc('save'); 				var 	o : SMapUpdate = ServiceFactory.getService(SMapUpdate) as SMapUpdate;					o.id = _uCURRENTMAPID;					o.datas =  _getContent();					o.call();			}						/**			* 			*			* @param 			* @return			*/			protected function _onProgress ( e : CommandBatchProgressEvent ) : void {				CommandProgress.getInstance().setProgress( (e.position / e.length) * 100 , (e.actualCommand as CMDMapFill).path);			}					// -------o misc			public static function trc(arguments : *) : void {				Logger.log(MapModel, arguments);			}	}}