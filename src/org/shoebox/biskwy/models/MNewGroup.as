/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.biskwy.models {	import org.shoebox.biskwy.core.Config;	import org.shoebox.biskwy.core.Database;	import org.shoebox.biskwy.core.Facade;	import org.shoebox.biskwy.core.IsoGrid;	import org.shoebox.biskwy.core.Schemas;	import org.shoebox.biskwy.core.TwoD;	import org.shoebox.biskwy.data.GroupFileChunks;	import org.shoebox.biskwy.events.GroupEvent;	import org.shoebox.biskwy.items.GridTile;	import org.shoebox.biskwy.services.SQLLiteService;	import org.shoebox.biskwy.services.groups.SGetGroupByID;	import org.shoebox.biskwy.services.groups.SGroupEdit;	import org.shoebox.biskwy.services.groups.SGroupInsert;	import org.shoebox.biskwy.views.VNewGroup;	import org.shoebox.patterns.mvc.abstracts.AModel;	import org.shoebox.patterns.mvc.interfaces.IModel;	import org.shoebox.patterns.service.ServiceEvent;	import org.shoebox.patterns.service.ServiceFactory;	import org.shoebox.utils.logger.Logger;	import flash.events.Event;	import flash.events.SQLEvent;	import flash.utils.ByteArray;	/**	 * org.shoebox.biskwy.models.MNewGroup	* @author shoebox	*/	public class MNewGroup extends AModel implements IModel {				public static const EDIT		:String = 'NewGroup_EDIT';		public static const INIT		:String = 'NewGroup_INIT';				protected var _bEDITING			:Boolean;		protected var _oCONTENT			:ByteArray;		protected var _oTILEDATAS		:Object;		protected var _oGROUPNAME		:String = 'Untitled';		protected var _uGROUPID			:uint;		protected var _oXML			:XML;				// -------o constructor					/**			* Constructor of the MNewGroup class			*			* @public			* @return	void			*/			public function MNewGroup() : void {				_oXML = <root>			      		<entry label = "INFOS" 		type = "title" prop='infottl1'/>			      		<entry label = 'Group name' 	prop='name' type = "string" value = "Untitled" />			      					      		<entry label = "BASE SIZE" 		type = "title" prop='infottl2'/>			      		<entry label = 'Base width' 		prop='bWidth' type = "number" value = "3" 	min='1' max='1000'/>			      		<entry label = 'Base height' 		prop='bHeight' type = "number" value = "1" 	min='0' max='1000'/>			      					      		<entry label = "GROUP SIZE" 		type = "title" prop='infottl3'/>			      		<entry label = 'Content height' 	prop='cHeight' type = "number" value = "1" min='0' max='1000'/>			      					      	</root>;			}		// -------o public						/**			* Getter of the props panel initialization XML			* 			* @public			* @return	props datas (XML)			*/			public function get props() : XML {				return _oXML;			}						/**			* initialize function			* @public			* @param 			* @return			*/			final override public function initialize( e : Event = null ) : void {				trc('initialize ::: '+e);				if(e)					if( e.type == GroupEvent.EDIT)						_edit( (e as GroupEvent).groupID );					else						_initTable();				else					_initTable();			}									/**			* When the model is cancel			* 			* @public			* @param	e : Cancel event (Event) 			* @return	void			*/			final override public function cancel(e:Event = null) : void {									}						/**			* When the group creation is runned			* 			* @public			* @return void			*/			public function validate() : void {				var 	ns : Namespace = Config.GRIDTYPE;								if(_bEDITING){										var 	oEDIT : SGroupEdit = ServiceFactory.getService( SGroupEdit ) as SGroupEdit;						oEDIT.groupID = _uGROUPID;						oEDIT.datas = ns::_getContent();						oEDIT.preview = (view as VNewGroup).preview;						oEDIT.props = (view as VNewGroup).props;						oEDIT.addEventListener( ServiceEvent.ON_DATAS , _onResponse , false , 10 , true );						oEDIT.call();				}else{										var 	oINSERT : SGroupInsert = ServiceFactory.getService( SGroupInsert ) as SGroupInsert;						oINSERT.datas = ns::_getContent();						oINSERT.preview = (view as VNewGroup).preview;						oINSERT.props = (view as VNewGroup).props;						oINSERT.addEventListener( ServiceEvent.ON_DATAS , _onResponse , false , 10 , true );						oINSERT.call();				}			}		// -------o protected						/**			* Update the windows title with the name of the edited group 			*			* @return void			*/			protected function _title() : void {				Facade.windowTitle = 'Editing group ::: '+_oGROUPNAME;			}						/**			* Initializating the Groups table			* @see <code>Schemas</code> for the Table SQL Schema			* 			* @return void			*/			protected function _initTable() : void {				update(INIT);				/*				trc('initTable');				Database.getInstance().text = Schemas.TBGroups;				//Database.getInstance().text = 'DROP TABLE TB_Groups';				Database.getInstance().addEventListener( SQLEvent.RESULT , _onTable , false , 10 , true);				Database.getInstance().execute();				 * 				 */			}						/**			* When the table is build / checked			*			* @param	e : sql response event (SQLEvent) 			* @return	void			*/			protected function _onTable( e : SQLEvent ) : void {				trc('onTable');				(e.target as Database).removeEventListener( SQLEvent.RESULT , _onTable , false );			}						/**			* Service response			*			* @param 	e : Service response event (Event)			* @return	void			*/			protected function _onResponse( e : ServiceEvent ) : void {			}						/**			* Generate the content of the group file 			*			* @return	raw datas (Array2D)			*/			TwoD function _getContent() : ByteArray {				trc('getContent');								//					var oDATAS : Object = (view as VNewGroup).props;								// Group Infos					_oCONTENT = new ByteArray();					_oCONTENT.writeShort(GroupFileChunks.INFOS);					_oCONTENT.writeShort((Config.GRIDTYPE==IsoGrid) ? 0 : 1);	//TODO : TBD					_oCONTENT.writeInt( oDATAS.bWidth );					_oCONTENT.writeInt( oDATAS.bHeight );					_oCONTENT.writeInt( oDATAS.cHeight );								// Group content					_oCONTENT.writeShort(GroupFileChunks.CONTENT);					var t : GridTile;					var v : Vector.<GridTile> = (view as VNewGroup).tiles;					var x : int;					var y : int;					var h : int = oDATAS.bHeight + oDATAS.cHeight - 1;					var a : Vector.<Vector.<int>> = new Vector.<Vector.<int>>(oDATAS.bWidth);					var d : Vector.<int>;					var z : uint;					var i : int;					var l : int;					for each( t in v ){												//							x = t.position.x;							y = (h - t.position.y);							z = y * Config.TILESIZE;							d = t.container.content;													//							if( d ) {								i = 0;								l = d.length;								while( i < l) {																		if(a[x]==null)										a[x] = new Vector.<int>();										a[x].push( d[i] );										a[x].push( d[i + 1] + z );																		i += 2;								}								}					}					_oCONTENT.writeObject(a);									//					_oCONTENT.compress();					return _oCONTENT;			}						/**			* 			*			* @param 			* @return			*/			protected function _edit( uGROUPID : uint ) : void {				trc('edit ::: '+uGROUPID);				_uGROUPID = uGROUPID;				_bEDITING = true;				var	oSERVICE : SGetGroupByID = ServiceFactory.getService( SGetGroupByID ) as SGetGroupByID;					oSERVICE.groupID =  uGROUPID;					oSERVICE.addEventListener( ServiceEvent.ON_DATAS , _onGroupDatas , false , 10 , true );					oSERVICE.call();					}						/**			* 			*			* @param 			* @return			*/			protected function _onGroupDatas( e : ServiceEvent ) : void {				trc('onGroupDatas');								_oTILEDATAS = e.datas[0];				_oXML..entry.(@prop=='name')[0].@value 	= _oTILEDATAS.name;			      _oXML..entry.(@prop=='bWidth')[0].@value 	= _oTILEDATAS.baseW;			      _oXML..entry.(@prop=='bHeight')[0].@value = _oTILEDATAS.baseH;			      _oXML..entry.(@prop=='cHeight')[0].@value = _oTILEDATAS.height;				update(INIT);				update(EDIT);								var 	ns : Namespace = Config.GRIDTYPE;					ns :: _parse(); 								}						/**			* Parsing of the group content			*			* @return void			*/			TwoD function _parse() : void {				trc('parse');								//					var 	oB : ByteArray = new ByteArray();						oB.writeBytes( _oTILEDATAS.data as ByteArray , 0); 						oB.uncompress();										//					oB.position = 18;					var o : Object = oB.readObject();					var w : uint = o.length;					var x : uint;					var v : Vector.<int>;					var y : uint;					var z : int;					var id : uint;					for( x ; x < w ; x ++ ){						v = o[x] as Vector.<int>;												z = 0;						while( z < v.length ){							id = v[z];							y = (_oTILEDATAS.baseH + _oTILEDATAS.height - 1) - v[z + 1] / Config.TILESIZE;							(view as VNewGroup).addTileAt( x , y , id );							z += 2;						}					}							}					// -------o misc			public static function trc(...args : *) : void {				Logger.log(MNewGroup, args);			}	}}