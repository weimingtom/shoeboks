/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.biskwy.events {	import org.shoebox.utils.logger.Logger;	import flash.events.Event;	/**	 * org.shoebox.biskwy.events.TileEvent	* @author shoebox	*/	public class TileEvent extends Event{				public static const DELETE			:String = 'TileEvent_DELETE';		public static const EDIT			:String = 'TileEvent_EDIT';		public static const MULTISELECTION	:String = 'TileEvent_MULTISELECTION';		public static const SELECTION		:String = 'TileEvent_SELECTION';				protected var _oTILEDESC		:Object;		protected var _uTILEID			:uint;		protected var _vSELECTIONLIST		:Vector.<Object>;				// -------o constructor					public function TileEvent( sTYPE : String ) : void {				super(sTYPE);			}		// -------o public						/**			* set tileID function			* @public			* @param 			* @return			*/			public function set tileID( u : uint ) : void {				_uTILEID = u;			}						/**			* get tileID function			* @public			* @param 			* @return			*/			public function get tileID() : uint {				return _uTILEID;			}						/**			* set tileREF function			* @public			* @param 			* @return			*/			public function set tileDESC( o : Object ) : void {				_oTILEDESC = o;			}						/**			* set tileDesc function			* @public			* @param 			* @return			*/			public function get tileDesc( ) : Object {				return _oTILEDESC;			}						/**			* Setter of the selection list			* 			* @public			* @param	v : selection list (Vector.<Object>) 			* @return	void			*/			public function set multiSelectionList( v : Vector.<Object> ) : void {				_vSELECTIONLIST = v;			}						/**			* Getter of the selection list			* 			* @public			* @return	v : selection list (Vector.<Object>)			*/			public function get multiSelectionList() : Vector.<Object> {				return _vSELECTIONLIST;			}					// -------o protected		// -------o misc			public static function trc(...args : *) : void {				Logger.log(TileEvent, args);			}	}}