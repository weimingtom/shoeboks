/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce e above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR   PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.engine.core {	import org.shoebox.apps.frakconsole.core.Frak;	import org.shoebox.engine.core.variables.CameraMask;	import org.shoebox.engine.core.variables.Container;	import org.shoebox.engine.core.variables.Dimension;	import org.shoebox.engine.core.variables.RootPath;	import org.shoebox.engine.core.variables.TileSize;	import org.shoebox.engine.events.MapEvent;	import org.shoebox.engine.services.SProject;	import org.shoebox.patterns.commands.samples.IResizeable;	import org.shoebox.patterns.commands.samples.StageResize;	import org.shoebox.patterns.service.MediaService;	import org.shoebox.patterns.service.ServiceEvent;	import org.shoebox.patterns.service.ServiceFactory;	import org.shoebox.utils.Metronome;	import org.shoebox.utils.display.STAGEINSTANCE;	import org.shoebox.utils.logger.Logger;	import flash.display.Sprite;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.geom.Rectangle;	import flash.net.URLRequest;	import flash.system.ApplicationDomain;	import flash.system.LoaderContext;	/**	 * org.shoebox.engine.core.MainRenderer	* @author shoebox	*/	public class MainRenderer extends Sprite implements IResizeable{				protected var _oSERVICE			:MediaService;		protected var _oCHRONO			:Metronome;		protected var _spCONTAINER		:Sprite = new Sprite();		protected var _spMASK			:Sprite = new Sprite();		protected var _spMASKED			:Sprite;				// -------o constructor					/**			* Constructor of the MainRenderer class			*			* @public			* @return	void			*/			public function MainRenderer( ) : void {								if(root.loaderInfo.parameters.path!== undefined)					RootPath = root.loaderInfo.parameters.path;									if(stage)					_stage();				else					addEventListener( Event.ADDED_TO_STAGE , _stage , false , 10 , true );			}		// -------o public						/**			* onResize function			* @public			* @param 			* @return			*/			final public function onResize( e : Event = null ) : void {								var 	oREC : Rectangle = new Rectangle( 0 , 0 , TileSize * Dimension.x * 2 , TileSize * Dimension.y * 2);					_spMASKED.x = oREC.x = StageResize.rect.width / 2 - oREC.width / 2;					_spMASKED.y = oREC.y = StageResize.rect.height / 2 - oREC.height / 2;					_spMASKED.scrollRect = oREC;							}					// -------o protected						/**			* When the renderer is added to staged			*			* @param	e : add to staged optional event	(Event) 			* @return	void			*/			protected function _stage( e : Event = null ) : void {				trace('onStage');				if(e)					removeEventListener( Event.ADDED_TO_STAGE , _init , false );				STAGEINSTANCE = stage;				//new StageBatch(stage).execute();				new StageResize(stage).execute();				//StageResize.register( this );				//new StageCommand(stage).execute();								_oCHRONO = new Metronome( 1000 / stage.frameRate );				_oCHRONO.start();								stage.align = StageAlign.TOP_LEFT;				stage.scaleMode = StageScaleMode.NO_SCALE;												Logger.level = Logger.LOGLEVEL_LOG;				Facade.getInstance().owner = this;								_assets();				//_run();			}						/**			* Loading the biskwy's assets			*			* @return void			*/			protected function _assets() : void {				_oSERVICE = new MediaService();				_oSERVICE.request = new URLRequest('../assets/perso.swf');				_oSERVICE.context = new LoaderContext(false,ApplicationDomain.currentDomain);				_oSERVICE.addEventListener(ServiceEvent.ON_DATAS, _onAssets , false , 10 , true);				_oSERVICE.call();			}						/**			* When the assets are loaded			*			* @param 	e : event (ServiceEvent)			* @return	void			*/			protected function _onAssets( e : ServiceEvent) : void {				_oSERVICE.removeEventListener(ServiceEvent.ON_DATAS, _onAssets , false );				_run();			}						/**			* Loading the project datas			*				* @return	void			*/			protected function _run() : void {								var 	oSERVICE : SProject = ServiceFactory.getService( SProject ) as SProject;					oSERVICE.addEventListener( ServiceEvent.ON_DATAS , _onProject , false , 10 , true );					oSERVICE.call();								}						/**			* When the raw project datas are loaded by the <code>SProject</code> service			*			* @param	e : service response event (ServiceEvent) 			* @return	void			*/			protected function _onProject( e : ServiceEvent ) : void {				trc('onProject ::: '+e);				_init();			}						/**			* Initializing the MainRenderer class			*			* @return	void			*/			protected function _init() : void {								//					//stage.addEventListener( Event.ENTER_FRAME , _onFrame , false , 10 , true );								//					Container = _spCONTAINER = new Sprite();					Container.opaqueBackground = 0xEAEAEA;					//stage.mouseChildren = false;									//						_spMASKED = new Sprite();					_spMASKED.cacheAsBitmap = true;					_spMASKED.addChild( Container );					addChild( _spMASKED );					CameraMask = _spMASKED;									//					var uSIZE : uint = TileSize;					_spMASK = new Sprite();					_spMASK.graphics.beginFill( 0xBBBBBB );					_spMASK.graphics.drawRect( 0 , 0 , uSIZE , StageResize.rect.height );					_spMASK.graphics.drawRect( StageResize.rect.width - uSIZE , 0 , uSIZE , StageResize.rect.height );					_spMASK.graphics.drawRect( uSIZE , 0 , StageResize.rect.width - uSIZE*2 , uSIZE );					_spMASK.graphics.drawRect( uSIZE , StageResize.rect.height - uSIZE , StageResize.rect.width - uSIZE*2 , uSIZE );					//addChild( _spMASK );					//addChild(_spMASK);					onResize();									//					addChild( Frak.getInstance() );					Facade.getInstance().run();					Facade.getInstance().state = Facade.STATE_DEFAULT;					Facade.getInstance().dispatchEvent( new MapEvent( MapEvent.LOAD_MAP , 0 ) );					onResize();					//addChild( new Perf() );			}						/**			* EnterFrame listener function			*			* @param 	e : optional frame event (Event)			* @return	void			*/			protected function _onFrame( e : Event = null ) : void {				e.stopPropagation();				e.preventDefault();				//LightSignal.getInstance().emit(Event.ENTER_FRAME);			}		// -------o misc			public static function trc(...args : *) : void {				Logger.log(MainRenderer, args);			}	}}