/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.engine.views {	import org.shoebox.biskwy.utils.Transformer;	import org.shoebox.collections.Array2D;	import org.shoebox.engine.core.variables.Container;	import org.shoebox.engine.core.variables.Dimension;	import org.shoebox.engine.core.variables.MapDatas;	import org.shoebox.engine.core.variables.Position;	import org.shoebox.engine.core.variables.TileSize;	import org.shoebox.engine.events.PlayerEvent;	import org.shoebox.engine.items.GridTileItem;	import org.shoebox.events.LightSignal;	import org.shoebox.patterns.commands.samples.StageResize;	import org.shoebox.patterns.factory.Factory;	import org.shoebox.patterns.mvc.abstracts.AView;	import org.shoebox.patterns.mvc.events.UpdateEvent;	import org.shoebox.patterns.mvc.interfaces.IView;	import org.shoebox.utils.logger.Logger;	import flash.events.Event;	import flash.geom.Vector3D;	import flash.text.TextField;	/**	 * org.shoebox.engine.views.VMapIso	* @author shoebox	*/	public class VMapIso extends AView implements IView {				protected var _aCONTENT			: Array2D;		protected var _bINIT			: Boolean;		protected var _uDECALX			: int;		protected var _uDECALY			: int;		protected var _vPOS2D			: Vector3D;		protected var _vPOSISO			: Vector3D;				// -------o constructor					/**			* Constructor of the VMapIso class			*			* @public			* @return	void			*/			public function VMapIso() : void {			}		// -------o public							/**			* initialize function			* @public			* @param 			* @return			*/			override final public function initialize() : void {				_vPOS2D = new Vector3D();			}							/**			* update function			* @public			* @param 			* @return			*/			override final public function update(o:UpdateEvent = null) : void {				_redraw();				_align();			}												/**			* cancel function			* @public			* @param 			* @return			*/			override final public function cancel(e:Event = null) : void {												}					// -------o protected						/**			* 			*			* @param 			* @return			*/			final protected function _redraw() : void {												//					_vPOS2D.x = Position.x * TileSize;					_vPOS2D.y = Position.y * TileSize;					_vPOSISO = Transformer.screenToWorld( _vPOS2D );					_aCONTENT = new Array2D( MapDatas.mapWidth , MapDatas.mapHeight );								//					var iX : int = -Dimension.x;					for( iX ; iX < Dimension.x ; iX++ )						_drawColAt( iX );										//					if(!_bINIT){						_bINIT = true;						LightSignal.getInstance().connect( PlayerEvent.PLAYER_MOVE , _onMove );					}								}						/**			* 			*			* @param 			* @return			*/			final protected function _drawColAt( iX : int ) : void {								var iY : int = -Dimension.y;				var vP : Vector3D;				for( iY ; iY < Dimension.y ; iY++ ){					vP = _worldTo2D(iX , iY);					_drawTileAt( vP.x , vP.y );				}			}						/**			* 			*			* @param 			* @return			*/			final protected function _drawRowAt( iY : int ) : void {			}						/**			* 			*			* @param 			* @return			*/			final protected function _worldTo2D( iX : int , iY : int ) : Vector3D {				var	ptNOISO : Vector3D = new Vector3D();					ptNOISO.x = iX * TileSize + ((iY%2!==0) ? TileSize : 0) + _vPOSISO.x;					ptNOISO.y = iY * TileSize / 2 + _vPOSISO.y;								var	vP : Vector3D = Transformer.worldToScreen( ptNOISO );					vP.x = Math.round( vP.x / TileSize );					vP.y = Math.round( vP.y / TileSize );											return vP;			}						/**			* Drawning a tile at the specified position			*			* @param	iX : x position of the tile ( uint ) 			* @param	iY : y position of the tile ( uint ) 			* @return	void			*/			final protected function _drawTileAt( iX : int , iY : int ) : void {								if( iX >= MapDatas.mapWidth || iX < 0 || iY >= MapDatas.mapHeight || iY < 0)					return;								if( _aCONTENT.getDatasAt(iX, iY) !== null)					return;								trace('drawTileAt ::: '+iX+' / '+iY);								var	vPOS : Vector3D = new Vector3D( iX , iY );								var 	vP : Vector3D = Transformer.screenToWorld( vPOS  );					vP.scaleBy( TileSize / 2 );								var 	oT : GridTileItem = new GridTileItem();					oT.reset();					oT.previewIso();					oT.x = vP.x;					oT.y = vP.y;					//oT.name = 'Tile_'+iPOSX+'-'+iPOSY;					oT.name = 'Tile_'+iX+'-'+iY;					oT.position = vPOS;					oT.depth =  iY*4000 + iX + 1;					//oT.content = MapDatas.getContentAt( iX, iY );					//oT.addChild( Factory.build( TextField, { width : TileSize , text : iPOSX+'-'+iPOSY , x : 15 , y : 10 }));					oT.addChild( Factory.build( TextField, { width : TileSize , text : iX+'-'+iY , x : 15 , y : 20 }));				Container.addChild( oT );				_aCONTENT.setDatasAt(iX, iY, oT);			}						/**			* When the player move			*			* @param 	e : player move event (PlayerEvent)			* @return	void			*/			final protected function _onMove( e : PlayerEvent ) : void {								// 					var	vPOS : Vector3D = _vPOS2D.subtract( e.moveVector ) ;						vPOS.x = Math.round( vPOS.x / TileSize );						vPOS.y = Math.round( vPOS.y / TileSize );					trace(vPOS);								//					if(vPOS.x < 0 || vPOS.y < 0 || vPOS.x >= MapDatas.mapWidth || vPOS.y >= MapDatas.mapHeight)						return;											_vPOS2D.decrementBy( e.moveVector );				//					var vDECAL	: Vector3D = vPOS.subtract( Position );					if( vDECAL.x > 0 ){						_drawColAt( Dimension.x );					}								//					Position = vPOS;					_align();			}						/**			* 			*			* @param 			* @return			*/			final protected function _align() : void {				_vPOSISO = Transformer.screenToWorld( _vPOS2D );				Container.x = - _vPOSISO.x / 2 + StageResize.rect.width / 2;				Container.y = - _vPOSISO.y / 2 + StageResize.rect.height / 2;			}					// -------o misc			public static function trc(...args : *) : void {				Logger.log(VMapIso, args);			}	}}