/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.engine.views {	import org.shoebox.engine.data.container;	import org.shoebox.engine.data.mapDatas;	import org.shoebox.engine.data.position;	import org.shoebox.engine.data.tileSize;	import org.shoebox.engine.events.PlayerEvent;	import org.shoebox.engine.items.Tile;	import org.shoebox.engine.utils.IsoCalc;	import org.shoebox.events.EventCentral;	import org.shoebox.patterns.commands.samples.StageResize;	import org.shoebox.patterns.mvc.abstracts.AView;	import org.shoebox.patterns.mvc.events.UpdateEvent;	import org.shoebox.patterns.mvc.interfaces.IView;	import org.shoebox.utils.logger.Logger;	import flash.events.Event;	import flash.geom.Vector3D;	/**	 * org.shoebox.engine.views.VMapRenderer	* @author shoebox	*/	public class VMapRenderer extends AView implements IView {				protected var _bFIRSTRUN	:Boolean = true;		protected var _uVIEWX		:int = 3;		protected var _uVIEWY		:int = 9;		protected var _nTILESIZE	:Number;		protected var _ptPOSTILE	:Vector3D = new Vector3D();		protected var _ptPOS2D		:Vector3D = new Vector3D();		protected var _vTILES		:Vector.<Tile> = new Vector.<Tile>();				// -------o constructor					/**			* Constructor of the VMapRenderer class			*			* @public			* @return	void			*/			public function VMapRenderer() : void {			}		// -------o public						/**			* initialize function			* @public			* @param 			* @return			*/			override final public function initialize() : void {				_nTILESIZE = tileSize / 2;				_draw();			}						/**			* update function			* @public			* @param 			* @return			*/			override final public function update(o:UpdateEvent = null) : void {						}												/**			* cancel function			* @public			* @param 			* @return			*/			override final public function cancel(e:Event = null) : void {												}					// -------o protected						/**			* 			*			* @param 			* @return			*/			protected function _draw() : void {												//					_ptPOS2D = new Vector3D();					_ptPOS2D.x = position.x * _nTILESIZE;					_ptPOS2D.y = position.y * _nTILESIZE;								_drawPos();								_center();				EventCentral.getInstance().addEventListener( PlayerEvent.PLAYER_MOVE , _onMove , false , 10 , true );			}						/**			* 			*			* @param 			* @return			*/			protected function _drawPos() : void {								//					var vISO	: Vector3D = IsoCalc.worldToScreen(_ptPOS2D);					var vNOISO	: Vector3D = new Vector3D();					var vTILE	: Vector3D = new Vector3D();					var vTILES	: Vector.<Tile> = new Vector.<Tile>();									//					var iX : int = -_uVIEWX;					var iY : int = -_uVIEWY;					var oT : Tile;					var sN : String;					var vDATAS : Vector.<int>;					var i : int;					var l : int;					for( iY ; iY <= _uVIEWY ; iY++ ){												iX = -_uVIEWX;						for( iX ; iX <= _uVIEWX ; iX ++ ){														vNOISO.x = iX * _nTILESIZE * 2 + ((iY%2 != 0) ? _nTILESIZE : 0 ) + vISO.x;							vNOISO.y = iY * _nTILESIZE / 2 + vISO.y;														vTILE = IsoCalc.screenToWorld(vNOISO);							vTILE.y = Math.round( vTILE.y / _nTILESIZE);							vTILE.x = Math.round( vTILE.x / _nTILESIZE);														sN = vTILE.x+'-'+vTILE.y;														oT = container.getChildByName(sN) as Tile;														if(oT!==null){								vTILES.push( oT );								continue;							}														oT = new Tile();							oT.x = vNOISO.x;							oT.y = vNOISO.y;							oT.name = sN;														oT.depth = (vTILE.y+vTILE.x)*tileSize/2*300+(vTILE.x-vTILE.y)*tileSize+1+100000;							oT.draw();							vTILES.push( oT );							_vTILES.push(oT);							container.addChild( oT );														//								vDATAS = mapDatas.getContentAt(vTILE.x , vTILE.y );								if(vDATAS){									l = vDATAS.length;									i = 0;									for(i ; i < l ; i+=2){										oT.layers.addItem(vDATAS[i],vDATAS[i+1]);									}								}															//oT.depth = vTILE.y*400+vTILE.x+1;													}											}								//					if(!_bFIRSTRUN){						var b : Boolean;						var oFUNC:Function = function( t : Tile , u : uint , v:Vector.<Tile>):Boolean{							b = (vTILES.indexOf(t)!==-1);							if(!b)								container.removeChild(t);							return b;									};						_vTILES = _vTILES.filter( oFUNC );					}										_bFIRSTRUN = false;					_depthSort();			}			/**			* 			*			* @param 			* @return			*/			protected function _center() : void {								var	ptISO : Vector3D = IsoCalc.worldToScreen( _ptPOS2D );									container.x = StageResize.rect.width / 2 - ptISO.x;  				container.y = StageResize.rect.height / 2 - ptISO.y;			}						/**			* 			*			* @param 			* @return			*/			protected function _onMove( e : PlayerEvent ) : void {				//trace(e.move);				_ptPOS2D.x += e.move.x;				_ptPOS2D.y += e.move.y;				_ptPOSTILE.x += e.move.x;				_ptPOSTILE.y += e.move.y;								var bCHANGE : Boolean = false;								//					if(_ptPOSTILE.x > _nTILESIZE) {												position.x++;						_ptPOSTILE.x -= _nTILESIZE;						bCHANGE = true;					}else if(_ptPOSTILE.x < 0){						position.x--;						_ptPOSTILE.x += _nTILESIZE;						bCHANGE = true;					}								//					if(_ptPOSTILE.y > _nTILESIZE){												position.y ++;						_ptPOSTILE.y -= _nTILESIZE;						bCHANGE = true;					}else if(_ptPOSTILE.y < 0){												position.y --;						_ptPOSTILE.y += _nTILESIZE;						bCHANGE = true;					}								//					if(bCHANGE){						_drawPos();					}					_center();							}							/**			* 			*			* @param 			* @return			*/			protected function _depthSort( ) : void {								//					var oFUNC : Function = function( t1 : Tile , t2 : Tile ):int {						if(t1.depth > t2.depth)							return +1;						else if(t1.depth < t2.depth)							return -1;						else							return 0;					};					_vTILES.sort( oFUNC);								//					var i:uint = 0;					var o:Tile;					for each(o in _vTILES){						if(container.contains(o)){							container.setChildIndex( o , i );							i++;						}					}							}		// -------o misc			public static function trc(...args : *) : void {				Logger.log(VMapRenderer, args);			}	}}