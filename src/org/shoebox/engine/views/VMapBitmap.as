/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.engine.views {	import org.shoebox.biskwy.utils.Transformer;	import org.shoebox.collections.Array2D;	import org.shoebox.collections.QuadTree;	import org.shoebox.engine.core.variables.Camera;	import org.shoebox.engine.core.variables.Container;	import org.shoebox.engine.core.variables.Dimension;	import org.shoebox.engine.core.variables.DisplayObjectCache;	import org.shoebox.engine.core.variables.MapDatas;	import org.shoebox.engine.core.variables.PlayerView;	import org.shoebox.engine.core.variables.Position;	import org.shoebox.engine.core.variables.Position2D;	import org.shoebox.engine.core.variables.SpritesCache;	import org.shoebox.engine.core.variables.TileSize;	import org.shoebox.engine.datas.TileProps;	import org.shoebox.engine.events.CameraEvent;	import org.shoebox.engine.events.PlayerEvent;	import org.shoebox.engine.interfaces.IZSortable;	import org.shoebox.engine.items.GridTileItem;	import org.shoebox.events.LightSignal;	import org.shoebox.patterns.commands.samples.StageResize;	import org.shoebox.patterns.mvc.abstracts.AView;	import org.shoebox.patterns.mvc.events.UpdateEvent;	import org.shoebox.patterns.mvc.interfaces.IView;	import org.shoebox.utils.logger.Logger;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.events.Event;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.geom.Vector3D;	/**	 * org.shoebox.engine.views.VMapBitmap	* @author shoebox	*/	public class VMapBitmap extends AView implements IView {				protected var _aCOLLIDABLE		:Array2D;		protected var _oMEDIA			:BitmapData;		protected var _oVIEW			:Bitmap = new Bitmap();		protected var _oMAP			:BitmapData;		protected var _vTMP			:Point = new Point();		protected var _oQUADTREE		:QuadTree;		protected var _vCHILDS			:Vector.<*>;				protected const _oPOINT			:Point = new Point( 0 , 0 );				// -------o constructor					/**			* Constructor of the VMapBitmap class			*			* @public			* @return	void			*/			public function VMapBitmap() : void {			}		// -------o public						/**			* initialize function			* @public			* @param 			* @return			*/			override final public function initialize() : void {								Container.addChildAt( _oVIEW  , 0 );			}						/**			* update function			* @public			* @param 			* @return			*/			override final public function update(o:UpdateEvent = null) : void {				_precache();			}												/**			* cancel function			* @public			* @param 			* @return			*/			override final public function cancel(e:Event = null) : void {												}					// -------o protected			/**			* 			*			* @param 			* @return			*/			final protected function _precache() : void {								//					_aCOLLIDABLE = new Array2D( MapDatas.mapWidth + 1 , MapDatas.mapHeight + 1 );					_vCHILDS = new Vector.<*>();					_oMAP = new BitmapData( TileSize * MapDatas.mapWidth , TileSize * MapDatas.mapHeight , false , 0xFF6600 );						_oQUADTREE = new QuadTree( new Rectangle( 0 , 0 , TileSize * MapDatas.mapWidth , TileSize * MapDatas.mapHeight ));								//					var vC : Vector.<int>;					var iX : int = 0;					var iY : int = 0;					var iL : int;					var iI : int;					var oB : BitmapData;					var oP : Point = new Point();					var oTILE : GridTileItem;										var oDESC :TileProps;					for( iX ; iX < MapDatas.mapWidth ; iX++ ){						oP.x = iX * TileSize;						iY = 0;												for( iY ; iY < MapDatas.mapHeight ; iY++ ){														vC = MapDatas.getContentAt( iX, iY );														iI = 0;							iL = vC.length;							for( iI ; iI < iL ; iI+=2 ){																oDESC = SpritesCache[vC[iI]]; 																if( oDESC.collidable )									_aCOLLIDABLE.setDatasAt(iX, iY, true);																if( oDESC.ground ){									oB = DisplayObjectCache[vC[iI]];									oP.y = iY * TileSize;									_oMAP.copyPixels( oB , oB.rect , oP );																	}else{									if( !oTILE ){										oTILE = new GridTileItem();										oTILE.x = iX * TileSize;										oTILE.depth = iY*4000 + iX + 1;										oTILE.y = iY * TileSize;									}																		oTILE.addLayer(  vC[iI], vC[iI+1] );								}							}														if( oTILE ){								_oQUADTREE.addItemAt( oTILE , oTILE.getRect( Container ) );								oTILE = null; 							}						}					}				_init();			}						/**			* 			*			* @param 			* @return			*/			final protected function _init() : void {								Position2D = new Vector3D( Position.x * TileSize , Position.y * TileSize );				Camera = new Rectangle( 0 , 0 , Dimension.x * TileSize * 2 , Dimension.y * TileSize * 2 );				Camera.x = Position2D.x - Dimension.x * TileSize;				Camera.y = Position2D.y - Dimension.y * TileSize;								_oMEDIA = new BitmapData( Dimension.x * TileSize * 2 , Dimension.y * TileSize * 2 ,true );				_oVIEW.bitmapData = _oMEDIA;				LightSignal.getInstance().connect( PlayerEvent.PLAYER_MOVE , _onMove );				_update();			}						/**			* 			*			* @param 			* @return			*/			final protected function _onMove( e : PlayerEvent ) : void {								_vTMP.x = Camera.x + e.moveVector.x;				_vTMP.y = Camera.y + e.moveVector.y;												var 	vTMP : Vector3D = Position2D.clone();					vTMP.x += e.moveVector.x;					vTMP.y += e.moveVector.y;								var 	vWLD : Vector3D = Transformer.worldToScreen( vTMP );					vWLD.x = Math.floor( vWLD.x );					vWLD.y = Math.floor( vWLD.y );								if( vWLD.x < 0 || vWLD.y < 0 || vWLD.x > MapDatas.mapWidth || vWLD.y > MapDatas.mapHeight )					return;									if( _aCOLLIDABLE.getDatasAt( vWLD.x, vWLD.y ))					return;								Camera.offset( e.moveVector.x , e.moveVector.y );				Position2D.incrementBy( e.moveVector );				_update( vWLD == Position );				Position = vWLD;			}						/**			* 			*			* @param 			* @return			*/ 			final protected function _update( b : Boolean = true ) : void {								var nFIXL : int = (Camera.left < 0) ? -Camera.left : 0;				var nFIXR : int = Math.max( Camera.right - _oMAP.width , 0 );				var nFIXT : int = ( Camera.top < 0 ) ? -Camera.top : 0;				var nFIXB : int = Math.max( Camera.bottom - _oMAP.height , 0 );								var 	oREC : Rectangle = Camera.clone();					oREC.x = oREC.x - nFIXR + nFIXL;					oREC.y = oREC.y - nFIXB + nFIXT;									_oMEDIA.copyPixels( _oMAP , oREC , _oPOINT );								//					Container.x = -(Camera.x + Camera.width / 2) + StageResize.rect.width / 2 + nFIXR - nFIXL;					Container.y = -(Camera.y + Camera.height / 2) + StageResize.rect.height / 2 + nFIXB - nFIXT;								_oVIEW.x = Camera.left - nFIXR + nFIXL;				_oVIEW.y = Camera.top - nFIXB + nFIXT;				if( !b )					_treeTest( oREC );			}						/**			* 			*			* @param 			* @return			*/			final protected function _treeTest( r : Rectangle ) : void {								if( r.right > _oMAP.width )					r.width -= (r.right - _oMAP.width );								if( r.bottom > _oMAP.height )					r.height -= (r.bottom - _oMAP.height );								var v : Vector.<*> = _oQUADTREE.getRectContent( r );								for each( o in _vCHILDS ){										if( v.indexOf(o)==-1)						Container.removeChild( o );									}								var o : Sprite;				for each( o in v )					if( !Container.contains(o) )						Container.addChild( o );								_vCHILDS = v;				_zSort();						}						/**			* Z sorting the tiles & the Player (<code>PlayerView</code>) 			*			* @return	void			*/			final protected function _zSort() : void {								//					var 	vTMP : Vector.<*> = _vCHILDS.slice();						vTMP.push( PlayerView );					_shellSort(vTMP);					//vTMP.sort(_sortFunc);														//					Container.setChildIndex( _oVIEW , 0 );					var i : uint = 1;					var o : IZSortable;					for each( o in vTMP ){						if(Container.contains(o as DisplayObject)) {							Container.setChildIndex(o as DisplayObject, i);							++i;						}					}			}						/**			* The shell sort algorithm is quicker than the <code>Vector.sort()</code> function			*			* @param 	data : Data to be sorted (Vector.<IZSortable>)			* @return	void			*/			protected function _shellSort( data : Vector.<*> ) : void {				const n : int = data.length;				var inc : int = int(n / 2 + .5);				var temp : IZSortable;				var j : int;				while( inc ) {					for(var i : int = inc;i < n;i++) {						temp = data[i];						j = i;						while(j >= inc && data[int(j - inc)].depth > temp.depth) {							data[j] = data[int(j - inc)];							j = int(j - inc);						}						data[j] = temp;					}					inc = int(inc / 2.2 + 0.5);				}			}						/**			* Depth sorting func			*			* @param 	t1 : sorting item 1 	(IZSortable)			* @param 	t2 : sorting item 2 	(IZSortable)			* @return	sort result 		(int)			*/			final protected function _sortFunc( t1 : IZSortable , t2 : IZSortable ) : int {				return (t1.depth==t2.depth ? 0 : (t1.depth < t2.depth) ? -1 : 1);			}					// -------o misc			public static function trc(...args : *) : void {				Logger.log(VMapBitmap, args);			}	}}