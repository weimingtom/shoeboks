/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package  org.shoebox.engine.controllers {	import org.shoebox.engine.core.variables.Grounded;
	import org.shoebox.engine.interfaces.IAnimSetController;	import org.shoebox.engine.models.MPlayerArray;	import org.shoebox.engine.views.VPlayerArray;	import org.shoebox.utils.logger.Logger;	import flash.geom.Point;	/**	 * org.shoebox.engine.controllers.CTigre	* @author shoebox	*/	public class CTigre extends AbstractCharController implements IAnimSetController{				public static const TURN_BACK		: uint = 0;		public static const WALK			: uint = 1;		public static const RUN			: uint = 3;		public static const STOP			: uint = 2;		public static const jumpH			: uint = 4;		public static const STALK			: uint = 5;				public var RUN_DISTANCE			: uint = 250;		public var WALK_DISTANCE			: uint = 120;		public var DEAD_DISTANCE			: uint = 50;				protected var _bFREEZE				: Boolean = false;				protected var _bLOOK_CYCLE			: Boolean = false;				protected var _bMOUSE_IS_DOWN		: Boolean = false;		protected var _ptMOUSE_POSITION		: Point; 				protected const POINT				: Point = new Point( 0 , 0 );				// -------o constructor					/**			* Constructor of the CTigre class			*			* @public			* @return	void			*/			public function CTigre() : void {				JUMP_DISTANCE = 100;			}		// -------o public						/**			* onMove function			* @public			* @param 			* @return			*/			final override public function onMove( ) : void {								var bDEAD : Boolean = ( Point.distance( POINT , _ptMOUSE) < DEAD_DISTANCE);								if( _bDOWN )					_bLEFT = (_ptMOUSE.x < 0 ); 								var iDX : uint = Math.abs( _ptMOUSE.x );				var iDY : uint = Math.abs( _ptMOUSE.y );								//					var iGOTO : int = -1;					if( !_bDOWN )						iGOTO = STOP;					else if( bDEAD )						if( _ptMOUSE.y > 0 ){							_unfreeze();							iGOTO = STOP;						}else							_freeze();												else  if( _bLOOK_LEFT !== _bLEFT ){												_unfreeze();						iGOTO = TURN_BACK;											}else if( iDY <= JUMP_DISTANCE && iDY > 0 ){												if( iDX < WALK_DISTANCE ){							_unfreeze();							iGOTO = WALK;						}else{							_unfreeze();							iGOTO = RUN;						}											}else if( _ptMOUSE.y > 0 ){						_unfreeze();						iGOTO = STALK;					}else{						_unfreeze();						iGOTO = jumpH;					}											if( iGOTO !== -1 ){						_bLOOK_CYCLE = _bLEFT;						(model as MPlayerArray).goTo = iGOTO;					}										}						/**			* nextCycle function			* @public			* @param 			* @return			*/			final override public function nextCycle() : void {							}						/**			* cycleEnd function			* @public			* @param 			* @return			*/			final public function cycleEnd() : void {				(view as VPlayerArray).mirror( _bLOOK_LEFT );								//var iCYCLE : int = (model as MPlayerArray).currentCycleID;				//if( iCYCLE == (model as MPlayerArray).getIndice('staticTurnback') || iCYCLE == (model as MPlayerArray).getIndice('walkTurnback') )					_bLOOK_LEFT = _bLEFT;											}		// -------o protected						/**			* 			*			* @param 			* @return			*/			final protected function _unfreeze() : void {				//trc('unfreeze');			}						/**			* 			*			* @param 			* @return			*/			final protected function _freeze() : void {				//trc('freeze');			}						/**			* 			*			* @param 			* @return			*/			final protected function _gotoWhere(  ) : void {								//					var nDISX : uint = Math.abs( _ptMOUSE.x );					var nDISY : uint = Math.abs( _ptMOUSE.y );								//					if( _bDOWN  ){																			if( _bLOOK_LEFT !== _bLEFT && !_bFREEZE ) {								(model as MPlayerArray).goTo = TURN_BACK;											}else{																if( nDISY <= JUMP_DISTANCE && _ptMOUSE.y < 0 )																	if( nDISX >= RUN_DISTANCE )										(model as MPlayerArray).goTo = RUN;									else										(model as MPlayerArray).goTo = WALK;								else if( _ptMOUSE.y > 50 )									(model as MPlayerArray).goTo = STALK;								else if( nDISX > JUMP_H_DISTANCE )										(model as MPlayerArray).goTo = jumpH;							}											}else{						(model as MPlayerArray).goTo = STOP;						_bLOOK_LEFT = (_ptMOUSE.x < 0); 					}			}					// -------o misc			public static function trc(...args : *) : void {				Logger.log(CTigre, args);			}	}}