/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package  org.shoebox.engine.controllers {	import org.shoebox.errors.Errors;	import org.shoebox.patterns.commands.samples.IFrameable;	import org.shoebox.patterns.mvc.abstracts.AController;	import org.shoebox.patterns.mvc.interfaces.IController;	import org.shoebox.utils.display.STAGEINSTANCE;	import org.shoebox.utils.logger.Logger;	import flash.errors.IllegalOperationError;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Point;	/**	 * fr.hyperfictions.sandbox.controller.AbstractCharController	* @author shoebox	*/	public class AbstractCharController extends AController implements IController {				public var JUMP_DISTANCE	: uint = 160;		public var JUMP_H_DISTANCE	: uint = 120;				public var hasJump				: Boolean = true;				protected var _bDOWN				: Boolean = false;		protected var _bENABLED			: Boolean = false;				protected var _ptMOUSE				: Point = new Point();				// -------o constructor					/**			* Constructor of the AbstractCharController class			*			* @public			* @return	void			*/			public function AbstractCharController() : void {							}		// -------o public						/**			* Controller initialization			* 			* @public			* @return void			*/			final override public function initialize() : void {							}			/**			* When the controller receive an event 			* 			* @public			* @param	e : received event (Event) 			* @return	void			*/			final override public function onEvent( e : Event ) : void {				switch( e.type ){										case MouseEvent.MOUSE_UP:					case MouseEvent.MOUSE_DOWN:						_bDOWN = ( e.type == MouseEvent.MOUSE_DOWN );						//_onMove(  );						break;											case Event.ENTER_FRAME:						_ptMOUSE.x = view.mouseX;						_ptMOUSE.y = view.mouseY;						onMove(  );						(view as IFrameable).onFrame( e );						break;									}			}						/**			* When the controller is canceled			* 			* @public			* @param	e : optional cance event (Event) 			* @return	void			*/			final override public function cancel( e : Event = null ) : void {				unRegister( STAGEINSTANCE , MouseEvent.MOUSE_UP 	, false );					unRegister( STAGEINSTANCE , MouseEvent.MOUSE_DOWN 	, false );					unRegister( STAGEINSTANCE , Event.ENTER_FRAME 	, false );				}						/**			* set enableBool( b : Boolean  function			* @public			* @param 			* @return			*/			final public function set enableBool( b : Boolean ) : void {				_bENABLED = b;			}						/**			* set enabled function			* @public			* @param 			* @return			*/			final public function set enabled( b : Boolean ) : void {								if( b ){					register( STAGEINSTANCE , MouseEvent.MOUSE_DOWN 	, false , 10 , true );					register( STAGEINSTANCE , MouseEvent.MOUSE_UP		, false , 10 , true );					register( STAGEINSTANCE , Event.ENTER_FRAME 		, false , 10 , true );									}else{										unRegister( STAGEINSTANCE , MouseEvent.MOUSE_DOWN 	, false );					unRegister( STAGEINSTANCE , MouseEvent.MOUSE_UP	, false );					unRegister( STAGEINSTANCE , Event.ENTER_FRAME 	, false );								}				view.mouseEnabled = !b;				_bENABLED = b;			}						/**			* get enabled function			* @public			* @param 			* @return			*/			final public function get enabled() : Boolean {				return _bENABLED;			}						/**			* run function			* @public			* @param 			* @return			*/			final public function run() : void {				register( STAGEINSTANCE , MouseEvent.MOUSE_UP 	, false , 10 , true );					register( STAGEINSTANCE , MouseEvent.MOUSE_DOWN 	, false , 10 , true );					register( STAGEINSTANCE , Event.ENTER_FRAME 		, false , 10 , true );				}						/**			* onMove function			* @public			* @param 			* @return			*/			public function onMove( ) : void {				throw new IllegalOperationError( Errors.DONOTHING );			}						/**			* nextCycle function			* @public			* @param 			* @return			*/			public function nextCycle() : void {				throw new IllegalOperationError( Errors.DONOTHING );			}				// -------o protected							// -------o misc			public static function trc(...args : *) : void {				Logger.log(AbstractCharController, args);			}	}}